{ parameter
    (or (or (or %admin (or (unit %confirm_admin) (bool %pause)) (address %set_admin))
            (or %assets
               (or %fa2
                  (or (pair %balance_of
                         (list %requests (pair (address %owner) (nat %token_id)))
                         (contract %callback
                            (list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)))))
                      (list %transfer
                         (pair (address %from_) (list %txs (pair (address %to_) (nat %token_id) (nat %amount))))))
                  (list %update_operators
                     (or (pair %add_operator (address %owner) (address %operator) (nat %token_id))
                         (pair %remove_operator (address %owner) (address %operator) (nat %token_id)))))
               (pair %token_metadata
                  (list %token_ids nat)
                  (lambda %handler (list (pair (nat %token_id) (map %token_info string bytes))) unit))))
        (or %tokens
           (pair %burn_tokens (nat %from_) (nat %to_))
           (pair %mint_tokens
              (pair %token_def (nat %from_) (nat %to_))
              (pair %metadata (nat %token_id) (map %token_info string bytes))
              (list %owners address)))) ;
  storage
    (pair (pair (pair %admin (pair (address %admin) (bool %paused)) (option %pending_admin address))
                (pair %assets
                   (pair (big_map %ledger nat address)
                         (pair %metadata
                            (pair (big_map %metadata
                                     (pair (nat %from_) (nat %to_))
                                     (pair (nat %token_id) (map %token_info string bytes)))
                                  (nat %next_token_id))
                            (set %token_defs (pair (nat %from_) (nat %to_)))))
                   (big_map %operators (pair address address nat) unit)))
          (big_map %metadata string bytes)) ;
  code { PUSH string "FA2_TOKEN_UNDEFINED" ;
         PUSH string "FA2_INSUFFICIENT_BALANCE" ;
         LAMBDA
           (pair (pair address bool) (option address))
           unit
           { CAR ;
             CAR ;
             SENDER ;
             COMPARE ;
             NEQ ;
             IF { PUSH string "NOT_AN_ADMIN" ; FAILWITH } { UNIT } } ;
         DIG 3 ;
         UNPAIR ;
         IF_LEFT
           { IF_LEFT
               { DIG 3 ;
                 DIG 4 ;
                 DROP 2 ;
                 DUP 2 ;
                 CAR ;
                 CAR ;
                 SWAP ;
                 IF_LEFT
                   { IF_LEFT
                       { DIG 3 ;
                         DROP 2 ;
                         DUP ;
                         CDR ;
                         IF_NONE
                           { DROP ; PUSH string "NO_PENDING_ADMIN" ; FAILWITH }
                           { SENDER ;
                             SWAP ;
                             DUP 2 ;
                             COMPARE ;
                             EQ ;
                             IF { NONE address ; DIG 2 ; CAR ; CDR ; DIG 2 ; PAIR ; PAIR }
                                { DROP 2 ; PUSH string "NOT_A_PENDING_ADMIN" ; FAILWITH } } }
                       { DUP 2 ;
                         DIG 4 ;
                         SWAP ;
                         EXEC ;
                         DROP ;
                         DUP 2 ;
                         CDR ;
                         SWAP ;
                         DIG 2 ;
                         CAR ;
                         CAR ;
                         PAIR ;
                         PAIR } }
                   { DUP 2 ; DIG 4 ; SWAP ; EXEC ; DROP ; SOME ; SWAP ; CAR ; PAIR } ;
                 NIL operation ;
                 DUP 3 ;
                 CDR ;
                 DIG 3 ;
                 CAR ;
                 CDR ;
                 DIG 3 }
               { DIG 2 ;
                 DROP ;
                 DUP 2 ;
                 CAR ;
                 CAR ;
                 CAR ;
                 CDR ;
                 IF { PUSH string "PAUSED" ; FAILWITH } {} ;
                 DUP 2 ;
                 CAR ;
                 CDR ;
                 SWAP ;
                 IF_LEFT
                   { IF_LEFT
                       { IF_LEFT
                           { DIG 3 ;
                             DROP ;
                             DUP ;
                             CAR ;
                             MAP { DUP 3 ;
                                   CAR ;
                                   CAR ;
                                   DUP 2 ;
                                   CDR ;
                                   GET ;
                                   IF_NONE
                                     { DROP ; DUP 4 ; FAILWITH }
                                     { DUP 2 ;
                                       CAR ;
                                       SWAP ;
                                       COMPARE ;
                                       EQ ;
                                       IF { PUSH nat 1 } { PUSH nat 0 } ;
                                       SWAP ;
                                       PAIR } } ;
                             DIG 4 ;
                             DROP ;
                             SWAP ;
                             CDR ;
                             PUSH mutez 0 ;
                             DIG 2 ;
                             TRANSFER_TOKENS ;
                             SWAP ;
                             NIL operation ;
                             DIG 2 ;
                             CONS }
                           { DUP 2 ;
                             CAR ;
                             CAR ;
                             SWAP ;
                             ITER { SWAP ;
                                    DUP 2 ;
                                    CDR ;
                                    ITER { SWAP ;
                                           PUSH nat 0 ;
                                           DUP 3 ;
                                           GET 4 ;
                                           COMPARE ;
                                           EQ ;
                                           IF { SWAP ; DROP }
                                              { PUSH nat 1 ;
                                                DUP 3 ;
                                                GET 4 ;
                                                COMPARE ;
                                                NEQ ;
                                                IF { DROP 2 ; DUP 4 ; FAILWITH }
                                                   { DUP ;
                                                     DUP 3 ;
                                                     GET 3 ;
                                                     GET ;
                                                     IF_NONE
                                                       { DROP 2 ; DUP 5 ; FAILWITH }
                                                       { DUP 4 ;
                                                         CAR ;
                                                         DUP 2 ;
                                                         COMPARE ;
                                                         NEQ ;
                                                         IF { DROP 3 ; DUP 4 ; FAILWITH }
                                                            { SENDER ;
                                                              DUP ;
                                                              DUP 3 ;
                                                              COMPARE ;
                                                              EQ ;
                                                              IF { DROP 2 }
                                                                 { DUP 6 ;
                                                                   CDR ;
                                                                   DUP 5 ;
                                                                   GET 3 ;
                                                                   DIG 2 ;
                                                                   PAIR ;
                                                                   DIG 2 ;
                                                                   PAIR ;
                                                                   MEM ;
                                                                   IF {} { PUSH string "FA2_NOT_OPERATOR" ; FAILWITH } } ;
                                                              DUP 2 ;
                                                              CAR ;
                                                              SOME ;
                                                              DIG 2 ;
                                                              GET 3 ;
                                                              UPDATE } } } } } ;
                                    SWAP ;
                                    DROP } ;
                             DIG 3 ;
                             DIG 4 ;
                             DROP 2 ;
                             DUP 2 ;
                             CDR ;
                             DIG 2 ;
                             CAR ;
                             CDR ;
                             DIG 2 ;
                             PAIR ;
                             PAIR ;
                             NIL operation } }
                       { DIG 3 ;
                         DIG 4 ;
                         DROP 2 ;
                         SENDER ;
                         DUP 3 ;
                         CDR ;
                         DIG 2 ;
                         ITER { SWAP ;
                                DUP 3 ;
                                DUP 3 ;
                                IF_LEFT {} {} ;
                                CAR ;
                                COMPARE ;
                                EQ ;
                                IF {} { PUSH string "FA2_NOT_OWNER" ; FAILWITH } ;
                                SWAP ;
                                IF_LEFT
                                  { SWAP ;
                                    UNIT ;
                                    SOME ;
                                    DUP 3 ;
                                    GET 4 ;
                                    DUP 4 ;
                                    GET 3 ;
                                    PAIR ;
                                    DIG 3 ;
                                    CAR ;
                                    PAIR ;
                                    UPDATE }
                                  { SWAP ;
                                    DUP 2 ;
                                    GET 4 ;
                                    DUP 3 ;
                                    GET 3 ;
                                    PAIR ;
                                    DIG 2 ;
                                    CAR ;
                                    PAIR ;
                                    NONE unit ;
                                    SWAP ;
                                    UPDATE } } ;
                         SWAP ;
                         DROP ;
                         SWAP ;
                         CAR ;
                         PAIR ;
                         NIL operation } }
                   { DIG 3 ;
                     DROP ;
                     DUP 2 ;
                     CAR ;
                     CDR ;
                     DUP 2 ;
                     CAR ;
                     MAP { NONE (pair nat nat) ;
                           DUP 3 ;
                           CDR ;
                           ITER { SWAP ;
                                  DUP ;
                                  IF_NONE
                                    { DROP ;
                                      DUP ;
                                      CDR ;
                                      DUP 3 ;
                                      COMPARE ;
                                      LT ;
                                      DUP 2 ;
                                      CAR ;
                                      DUP 4 ;
                                      COMPARE ;
                                      GE ;
                                      AND ;
                                      IF { SOME } { DROP ; NONE (pair nat nat) } }
                                    { DIG 2 ; DROP 2 } } ;
                           IF_NONE { DUP 6 ; FAILWITH } {} ;
                           DUP 3 ;
                           CAR ;
                           CAR ;
                           SWAP ;
                           GET ;
                           IF_NONE { DROP ; PUSH string "NO_DATA" ; FAILWITH } { SWAP ; UPDATE 1 } } ;
                     SWAP ;
                     DIG 5 ;
                     DROP 2 ;
                     SWAP ;
                     CDR ;
                     SWAP ;
                     EXEC ;
                     DROP ;
                     NIL operation } ;
                 DUP 3 ;
                 CDR ;
                 DIG 2 ;
                 DIG 3 ;
                 CAR ;
                 CAR } ;
             PAIR ;
             PAIR ;
             SWAP }
           { DIG 3 ;
             DIG 4 ;
             DROP 2 ;
             DUP 2 ;
             CAR ;
             CAR ;
             DIG 3 ;
             SWAP ;
             EXEC ;
             DROP ;
             DUP 2 ;
             CAR ;
             CDR ;
             SWAP ;
             IF_LEFT
               { DUP 2 ;
                 CAR ;
                 CDR ;
                 CDR ;
                 DUP 2 ;
                 MEM ;
                 NOT ;
                 IF { DROP 2 ; PUSH string "INVALID_PARAM" ; FAILWITH }
                    { DUP 2 ;
                      CAR ;
                      CDR ;
                      CDR ;
                      DUP 2 ;
                      PUSH bool False ;
                      SWAP ;
                      UPDATE ;
                      DUP 3 ;
                      CAR ;
                      CDR ;
                      CAR ;
                      PAIR ;
                      DUP 2 ;
                      CDR ;
                      DUP 4 ;
                      CAR ;
                      CAR ;
                      DUP 4 ;
                      CAR ;
                      PAIR ;
                      PAIR ;
                      LEFT (pair (pair nat (big_map nat address)) nat) ;
                      LOOP_LEFT
                        { DUP ;
                          CDR ;
                          DUP 2 ;
                          CAR ;
                          CAR ;
                          COMPARE ;
                          EQ ;
                          IF { RIGHT (pair (pair nat (big_map nat address)) nat) }
                             { DUP ;
                               CDR ;
                               DUP 2 ;
                               CAR ;
                               CDR ;
                               DUP 3 ;
                               CAR ;
                               CAR ;
                               NONE address ;
                               SWAP ;
                               UPDATE ;
                               PUSH nat 1 ;
                               DIG 3 ;
                               CAR ;
                               CAR ;
                               ADD ;
                               PAIR ;
                               PAIR ;
                               LEFT (pair (pair nat (big_map nat address)) nat) } } ;
                      DUP 4 ;
                      CDR ;
                      DUP 3 ;
                      CDR ;
                      DIG 3 ;
                      CAR ;
                      CDR ;
                      DUP 6 ;
                      CAR ;
                      CDR ;
                      CAR ;
                      CAR ;
                      DIG 5 ;
                      NONE (pair nat (map string bytes)) ;
                      SWAP ;
                      UPDATE ;
                      PAIR ;
                      PAIR ;
                      DIG 3 ;
                      DROP ;
                      DIG 2 ;
                      CAR ;
                      CDR ;
                      PAIR ;
                      PAIR } }
               { DUP ;
                 CAR ;
                 CAR ;
                 DUP 2 ;
                 CAR ;
                 CDR ;
                 SUB ;
                 ISNAT ;
                 IF_NONE
                   { PUSH string "EMPTY_TOKEN_DEF_RANGE" ; FAILWITH }
                   { DUP 2 ;
                     GET 4 ;
                     SIZE ;
                     SWAP ;
                     COMPARE ;
                     NEQ ;
                     IF { PUSH string "INVALID_OWNERS_LENGTH" ; FAILWITH } {} } ;
                 DUP ;
                 CAR ;
                 CAR ;
                 DUP 3 ;
                 CAR ;
                 CDR ;
                 CAR ;
                 CDR ;
                 COMPARE ;
                 GT ;
                 IF { DROP 2 ; PUSH string "USED_TOKEN_IDS" ; FAILWITH }
                    { NIL (pair address nat) ;
                      DUP 2 ;
                      CAR ;
                      CAR ;
                      PAIR ;
                      DUP 2 ;
                      GET 4 ;
                      ITER { SWAP ;
                             DUP ;
                             CDR ;
                             DUP 2 ;
                             CAR ;
                             DIG 3 ;
                             PAIR ;
                             CONS ;
                             PUSH nat 1 ;
                             DIG 2 ;
                             CAR ;
                             ADD ;
                             PAIR } ;
                      DUP 3 ;
                      CAR ;
                      CAR ;
                      SWAP ;
                      CDR ;
                      ITER { UNPAIR ; DIG 2 ; SWAP ; DIG 2 ; SWAP ; SOME ; SWAP ; UPDATE } ;
                      DUP 3 ;
                      CDR ;
                      DUP 4 ;
                      CAR ;
                      CDR ;
                      CDR ;
                      DUP 4 ;
                      CAR ;
                      PUSH bool True ;
                      SWAP ;
                      UPDATE ;
                      DUP 4 ;
                      CAR ;
                      CDR ;
                      DUP 6 ;
                      CAR ;
                      CDR ;
                      CAR ;
                      CAR ;
                      DUP 6 ;
                      GET 3 ;
                      DIG 6 ;
                      CAR ;
                      SWAP ;
                      SOME ;
                      SWAP ;
                      UPDATE ;
                      PAIR ;
                      PAIR ;
                      DIG 3 ;
                      DROP ;
                      DIG 2 ;
                      PAIR ;
                      PAIR } } ;
             DUP 2 ;
             CDR ;
             SWAP ;
             DIG 2 ;
             CAR ;
             CAR ;
             PAIR ;
             PAIR ;
             NIL operation } ;
         PAIR } }

