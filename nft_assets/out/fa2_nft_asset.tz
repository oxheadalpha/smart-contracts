{ parameter
    (or (or (or %admin (bool %pause) (address %set_admin))
            (or %assets
               (or (or (pair %balance_of
                          (contract %callback
                             (list (pair (nat %balance) (pair %request (address %owner) (nat %token_id)))))
                          (list %requests (pair (address %owner) (nat %token_id))))
                       (pair %is_operator
                          (contract %callback
                             (pair (bool %is_operator)
                                   (pair %operator
                                      (pair (address %operator) (address %owner))
                                      (or %tokens (unit %all_tokens) (set %some_tokens nat)))))
                          (pair %operator
                             (pair (address %operator) (address %owner))
                             (or %tokens (unit %all_tokens) (set %some_tokens nat)))))
                   (or (contract %permissions_descriptor
                          (pair (pair (option %custom (pair (option %config_api address) (string %tag)))
                                      (or %operator
                                         (or (unit %no_transfer) (unit %owner_or_operator_transfer))
                                         (unit %owner_transfer)))
                                (pair (or %receiver
                                         (or (unit %optional_owner_hook) (unit %owner_no_op))
                                         (unit %required_owner_hook))
                                      (or %sender
                                         (or (unit %optional_owner_hook) (unit %owner_no_op))
                                         (unit %required_owner_hook)))))
                       (pair %token_metadata
                          (contract %callback
                             (list (pair (pair (pair (nat %decimals) (map %extras string string))
                                               (pair (string %name) (string %symbol)))
                                         (nat %token_id))))
                          (list %token_ids nat))))
               (or (or (pair %total_supply
                          (contract %callback (list (pair (nat %token_id) (nat %total_supply))))
                          (list %token_ids nat))
                       (list %transfer
                          (pair (pair (nat %amount) (address %from_)) (pair (address %to_) (nat %token_id)))))
                   (list %update_operators
                      (or (pair %add_operator
                             (pair (address %operator) (address %owner))
                             (or %tokens (unit %all_tokens) (set %some_tokens nat)))
                          (pair %remove_operator
                             (pair (address %operator) (address %owner))
                             (or %tokens (unit %all_tokens) (set %some_tokens nat))))))))
        (or %tokens
           (pair %burn_tokens (nat %from_) (nat %to_))
           (pair %mint_tokens
              (pair (pair %metadata
                       (pair (pair (nat %decimals) (map %extras string string))
                             (pair (string %name) (string %symbol)))
                       (nat %token_id))
                    (list %owners address))
              (pair %token_def (nat %from_) (nat %to_))))) ;
  storage
    (pair (pair %admin (address %admin) (bool %paused))
          (pair %assets
             (pair (big_map %ledger nat address)
                   (pair %metadata
                      (pair (nat %last_used_id)
                            (big_map %metadata
                               (pair nat nat)
                               (pair (pair (pair (nat %decimals) (map %extras string string))
                                           (pair (string %name) (string %symbol)))
                                     (nat %token_id))))
                      (set %token_defs (pair nat nat))))
             (pair (big_map %operators (pair address address) bool)
                   (pair %permissions_descriptor
                      (pair (option %custom (pair (option %config_api address) (string %tag)))
                            (or %operator
                               (or (unit %no_transfer) (unit %owner_or_operator_transfer))
                               (unit %owner_transfer)))
                      (pair (or %receiver
                               (or (unit %optional_owner_hook) (unit %owner_no_op))
                               (unit %required_owner_hook))
                            (or %sender
                               (or (unit %optional_owner_hook) (unit %owner_no_op))
                               (unit %required_owner_hook))))))) ;
  code { LAMBDA
           (or (unit %all_tokens) (set %some_tokens nat))
           unit
           { DUP ;
             IF_LEFT
               { DROP ; UNIT }
               { PUSH nat 1 ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 SIZE ;
                 COMPARE ;
                 NEQ ;
                 IF { PUSH string "TOKEN_UNDEFINED" ; FAILWITH }
                    { DUP ;
                      PUSH nat 0 ;
                      MEM ;
                      IF { UNIT } { PUSH string "TOKEN_UNDEFINED" ; FAILWITH } } ;
                 DIP { DROP } } ;
             DIP { DROP } } ;
         LAMBDA
           (pair (address %admin) (bool %paused))
           unit
           { DUP ;
             CAR ;
             SENDER ;
             COMPARE ;
             NEQ ;
             IF { PUSH string "NOT_AN_ADMIN" ; FAILWITH } { UNIT } ;
             DIP { DROP } } ;
         DIG 2 ;
         DUP ;
         DUG 3 ;
         CDR ;
         DIG 3 ;
         DUP ;
         DUG 4 ;
         CAR ;
         IF_LEFT
           { DUP ;
             IF_LEFT
               { DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 CAR ;
                 DIG 4 ;
                 DUP ;
                 DUG 5 ;
                 SWAP ;
                 EXEC ;
                 DIG 3 ;
                 DUP ;
                 DUG 4 ;
                 CAR ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 PAIR ;
                 DUP ;
                 CDR ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 IF_LEFT
                   { DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     PAIR ;
                     DUP ;
                     CDR ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     SWAP ;
                     CAR ;
                     PAIR ;
                     DIP { DROP } ;
                     NIL operation ;
                     PAIR ;
                     DIP { DROP } }
                   { DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     PAIR ;
                     DUP ;
                     CDR ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     SWAP ;
                     CDR ;
                     SWAP ;
                     PAIR ;
                     DIP { DROP } ;
                     NIL operation ;
                     PAIR ;
                     DIP { DROP } } ;
                 DIP { DROP 2 } ;
                 DIG 4 ;
                 DUP ;
                 DUG 5 ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 SWAP ;
                 CDR ;
                 SWAP ;
                 PAIR ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 PAIR ;
                 DIP { DROP 3 } }
               { DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 CAR ;
                 CDR ;
                 IF { PUSH string "PAUSED" ; FAILWITH } { UNIT } ;
                 DIG 3 ;
                 DUP ;
                 DUG 4 ;
                 CDR ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 PAIR ;
                 DUP ;
                 CDR ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 IF_LEFT
                   { DUP ;
                     IF_LEFT
                       { DUP ;
                         IF_LEFT
                           { DIG 3 ;
                             DUP ;
                             DUG 4 ;
                             CAR ;
                             CAR ;
                             DIG 1 ;
                             DUP ;
                             DUG 2 ;
                             PAIR ;
                             DUP ;
                             CAR ;
                             DUP ;
                             CDR ;
                             MAP { DIG 2 ;
                                   DUP ;
                                   DUG 3 ;
                                   CDR ;
                                   DIG 1 ;
                                   DUP ;
                                   DUG 2 ;
                                   CDR ;
                                   GET ;
                                   IF_NONE
                                     { PUSH string "TOKEN_UNDEFINED" ; FAILWITH }
                                     { DIG 1 ;
                                       DUP ;
                                       DUG 2 ;
                                       DIG 2 ;
                                       DUP ;
                                       DUG 3 ;
                                       CAR ;
                                       DIG 2 ;
                                       DUP ;
                                       DUG 3 ;
                                       COMPARE ;
                                       EQ ;
                                       IF { PUSH nat 1 } { PUSH nat 0 } ;
                                       PAIR ;
                                       DIP { DROP } } ;
                                   DIP { DROP } } ;
                             DIG 1 ;
                             DUP ;
                             DUG 2 ;
                             CAR ;
                             PUSH mutez 0 ;
                             DIG 2 ;
                             DUP ;
                             DUG 3 ;
                             TRANSFER_TOKENS ;
                             DIP { DROP 3 } ;
                             DIG 4 ;
                             DUP ;
                             DUG 5 ;
                             NIL operation ;
                             DIG 2 ;
                             DUP ;
                             DUG 3 ;
                             CONS ;
                             PAIR ;
                             DIP { DROP 2 } }
                           { DUP ;
                             CDR ;
                             CDR ;
                             DIG 11 ;
                             DUP ;
                             DUG 12 ;
                             SWAP ;
                             EXEC ;
                             DIG 1 ;
                             DUP ;
                             DUG 2 ;
                             CAR ;
                             PUSH mutez 0 ;
                             DIG 3 ;
                             DUP ;
                             DUG 4 ;
                             CDR ;
                             DIG 7 ;
                             DUP ;
                             DUG 8 ;
                             CDR ;
                             CAR ;
                             DIG 5 ;
                             DUP ;
                             DUG 6 ;
                             CDR ;
                             CAR ;
                             CAR ;
                             DIG 6 ;
                             DUP ;
                             DUG 7 ;
                             CDR ;
                             CAR ;
                             CDR ;
                             PAIR ;
                             GET ;
                             IF_NONE { PUSH bool False } { DUP ; DIP { DROP } } ;
                             PAIR ;
                             TRANSFER_TOKENS ;
                             DIG 5 ;
                             DUP ;
                             DUG 6 ;
                             NIL operation ;
                             DIG 2 ;
                             DUP ;
                             DUG 3 ;
                             CONS ;
                             PAIR ;
                             DIP { DROP 3 } } ;
                         DIP { DROP } }
                       { DUP ;
                         IF_LEFT
                           { DUP ;
                             PUSH mutez 0 ;
                             DIG 5 ;
                             DUP ;
                             DUG 6 ;
                             CDR ;
                             CDR ;
                             TRANSFER_TOKENS ;
                             DIG 4 ;
                             DUP ;
                             DUG 5 ;
                             NIL operation ;
                             DIG 2 ;
                             DUP ;
                             DUG 3 ;
                             CONS ;
                             PAIR ;
                             DIP { DROP 2 } }
                           { DIG 3 ;
                             DUP ;
                             DUG 4 ;
                             CAR ;
                             CDR ;
                             DIG 1 ;
                             DUP ;
                             DUG 2 ;
                             CDR ;
                             PAIR ;
                             DUP ;
                             CDR ;
                             DIG 1 ;
                             DUP ;
                             DUG 2 ;
                             CAR ;
                             MAP { DIG 1 ;
                                   DUP ;
                                   DUG 2 ;
                                   CDR ;
                                   DIG 1 ;
                                   DUP ;
                                   DUG 2 ;
                                   PAIR ;
                                   DUP ;
                                   CAR ;
                                   NONE (pair (nat %from_) (nat %to_)) ;
                                   DIG 2 ;
                                   DUP ;
                                   DUG 3 ;
                                   CDR ;
                                   ITER { SWAP ;
                                          PAIR ;
                                          DUP ;
                                          CAR ;
                                          DIG 1 ;
                                          DUP ;
                                          DUG 2 ;
                                          CDR ;
                                          DIG 1 ;
                                          DUP ;
                                          DUG 2 ;
                                          IF_NONE
                                            { DUP ;
                                              CDR ;
                                              DIG 4 ;
                                              DUP ;
                                              DUG 5 ;
                                              COMPARE ;
                                              LT ;
                                              DIG 1 ;
                                              DUP ;
                                              DUG 2 ;
                                              CAR ;
                                              DIG 5 ;
                                              DUP ;
                                              DUG 6 ;
                                              COMPARE ;
                                              GE ;
                                              AND ;
                                              IF { DUP ; SOME } { NONE (pair (nat %from_) (nat %to_)) } }
                                            { DIG 2 ; DUP ; DUG 3 ; DIP { DROP } } ;
                                          DIP { DROP 3 } } ;
                                   DUP ;
                                   IF_NONE
                                     { PUSH string "TOKEN_UNDEFINED" ; FAILWITH }
                                     { DUP ; DIP { DROP } } ;
                                   DIP { DROP 3 } ;
                                   DIG 2 ;
                                   DUP ;
                                   DUG 3 ;
                                   CAR ;
                                   CDR ;
                                   DIG 1 ;
                                   DUP ;
                                   DUG 2 ;
                                   GET ;
                                   IF_NONE
                                     { PUSH string "NO_DATA" ; FAILWITH }
                                     { DUP ; DIG 3 ; DUP ; DUG 4 ; SWAP ; CAR ; PAIR ; DIP { DROP } } ;
                                   DIP { DROP 2 } } ;
                             DIP { DROP 2 } ;
                             DIG 1 ;
                             DUP ;
                             DUG 2 ;
                             CAR ;
                             PUSH mutez 0 ;
                             DIG 2 ;
                             DUP ;
                             DUG 3 ;
                             TRANSFER_TOKENS ;
                             DIG 5 ;
                             DUP ;
                             DUG 6 ;
                             NIL operation ;
                             DIG 2 ;
                             DUP ;
                             DUG 3 ;
                             CONS ;
                             PAIR ;
                             DIP { DROP 3 } } ;
                         DIP { DROP } } ;
                     DIP { DROP } }
                   { DUP ;
                     IF_LEFT
                       { DUP ;
                         IF_LEFT
                           { DIG 3 ;
                             DUP ;
                             DUG 4 ;
                             CAR ;
                             CAR ;
                             DIG 1 ;
                             DUP ;
                             DUG 2 ;
                             CDR ;
                             PAIR ;
                             DUP ;
                             CAR ;
                             MAP { DIG 1 ;
                                   DUP ;
                                   DUG 2 ;
                                   CDR ;
                                   DIG 1 ;
                                   DUP ;
                                   DUG 2 ;
                                   MEM ;
                                   IF { PUSH nat 1 ; DIG 1 ; DUP ; DUG 2 ; PAIR }
                                      { PUSH string "TOKEN_UNDEFINED" ; FAILWITH } ;
                                   DIP { DROP } } ;
                             DIP { DROP } ;
                             DIG 1 ;
                             DUP ;
                             DUG 2 ;
                             CAR ;
                             PUSH mutez 0 ;
                             DIG 2 ;
                             DUP ;
                             DUG 3 ;
                             TRANSFER_TOKENS ;
                             DIG 5 ;
                             DUP ;
                             DUG 6 ;
                             NIL operation ;
                             DIG 2 ;
                             DUP ;
                             DUG 3 ;
                             CONS ;
                             PAIR ;
                             DIP { DROP 3 } }
                           { DIG 3 ;
                             DUP ;
                             DUG 4 ;
                             CDR ;
                             CAR ;
                             DIG 4 ;
                             DUP ;
                             DUG 5 ;
                             CDR ;
                             CDR ;
                             CAR ;
                             CDR ;
                             DIG 2 ;
                             DUP ;
                             DUG 3 ;
                             PAIR ;
                             PAIR ;
                             DUP ;
                             CAR ;
                             CDR ;
                             IF_LEFT
                               { DUP ;
                                 IF_LEFT
                                   { PUSH string "TX_DENIED" ; FAILWITH }
                                   { PUSH bool True ; PUSH bool True ; PAIR ; DIP { DROP } } ;
                                 DIP { DROP } }
                               { PUSH bool False ; PUSH bool True ; PAIR ; DIP { DROP } } ;
                             SENDER ;
                             EMPTY_SET address ;
                             DIG 3 ;
                             DUP ;
                             DUG 4 ;
                             CAR ;
                             CAR ;
                             ITER { SWAP ;
                                    PAIR ;
                                    DUP ;
                                    CAR ;
                                    DIG 1 ;
                                    DUP ;
                                    DUG 2 ;
                                    CDR ;
                                    CAR ;
                                    CDR ;
                                    PUSH bool True ;
                                    SWAP ;
                                    UPDATE ;
                                    DIP { DROP } } ;
                             DUP ;
                             ITER { DIG 2 ;
                                    DUP ;
                                    DUG 3 ;
                                    DIG 1 ;
                                    DUP ;
                                    DUG 2 ;
                                    COMPARE ;
                                    EQ ;
                                    DIG 4 ;
                                    DUP ;
                                    DUG 5 ;
                                    CAR ;
                                    AND ;
                                    IF { UNIT }
                                       { DIG 3 ;
                                         DUP ;
                                         DUG 4 ;
                                         CDR ;
                                         NOT ;
                                         IF { PUSH string "NOT_OWNER" ; FAILWITH }
                                            { DIG 4 ;
                                              DUP ;
                                              DUG 5 ;
                                              CDR ;
                                              DIG 3 ;
                                              DUP ;
                                              DUG 4 ;
                                              DIG 2 ;
                                              DUP ;
                                              DUG 3 ;
                                              PAIR ;
                                              GET ;
                                              IF_NONE { PUSH string "NOT_OPERATOR" ; FAILWITH } { DROP ; UNIT } } } ;
                                    DROP 2 } ;
                             DROP 4 ;
                             PUSH unit Unit ;
                             DIG 4 ;
                             DUP ;
                             DUG 5 ;
                             CAR ;
                             CAR ;
                             DIG 2 ;
                             DUP ;
                             DUG 3 ;
                             PAIR ;
                             DUP ;
                             CDR ;
                             DUP ;
                             DIG 2 ;
                             DUP ;
                             DUG 3 ;
                             CAR ;
                             ITER { SWAP ;
                                    PAIR ;
                                    DUP ;
                                    CAR ;
                                    DIG 1 ;
                                    DUP ;
                                    DUG 2 ;
                                    CDR ;
                                    PUSH nat 0 ;
                                    DIG 1 ;
                                    DUP ;
                                    DUG 2 ;
                                    CAR ;
                                    CAR ;
                                    COMPARE ;
                                    EQ ;
                                    IF { DIG 1 ; DUP ; DUG 2 }
                                       { PUSH nat 1 ;
                                         DIG 1 ;
                                         DUP ;
                                         DUG 2 ;
                                         CAR ;
                                         CAR ;
                                         COMPARE ;
                                         NEQ ;
                                         IF { PUSH string "INSUFFICIENT_BALANCE" ; FAILWITH }
                                            { DIG 3 ;
                                              DUP ;
                                              DUG 4 ;
                                              DIG 1 ;
                                              DUP ;
                                              DUG 2 ;
                                              CDR ;
                                              CDR ;
                                              GET ;
                                              IF_NONE
                                                { PUSH string "TOKEN_UNDEFINED" ; FAILWITH }
                                                { DIG 1 ;
                                                  DUP ;
                                                  DUG 2 ;
                                                  CAR ;
                                                  CDR ;
                                                  DIG 1 ;
                                                  DUP ;
                                                  DUG 2 ;
                                                  COMPARE ;
                                                  NEQ ;
                                                  IF { PUSH string "INSUFFICIENT_BALANCE" ; FAILWITH }
                                                     { DIG 2 ;
                                                       DUP ;
                                                       DUG 3 ;
                                                       DIG 2 ;
                                                       DUP ;
                                                       DUG 3 ;
                                                       CDR ;
                                                       CAR ;
                                                       SOME ;
                                                       DIG 3 ;
                                                       DUP ;
                                                       DUG 4 ;
                                                       CDR ;
                                                       CDR ;
                                                       UPDATE } ;
                                                  DIP { DROP } } } } ;
                                    DIP { DROP 3 } } ;
                             DIP { DROP 2 } ;
                             DIG 5 ;
                             DUP ;
                             DUG 6 ;
                             DIG 1 ;
                             DUP ;
                             DUG 2 ;
                             DIP { DUP ; CDR ; SWAP ; CAR ; CDR } ;
                             PAIR ;
                             PAIR ;
                             NIL operation ;
                             PAIR ;
                             DIP { DROP 3 } } ;
                         DIP { DROP } }
                       { DIG 2 ;
                         DUP ;
                         DUG 3 ;
                         CDR ;
                         CAR ;
                         DIG 1 ;
                         DUP ;
                         DUG 2 ;
                         PAIR ;
                         DUP ;
                         CDR ;
                         DIG 1 ;
                         DUP ;
                         DUG 2 ;
                         CAR ;
                         ITER { SWAP ;
                                PAIR ;
                                DUP ;
                                CAR ;
                                DIG 1 ;
                                DUP ;
                                DUG 2 ;
                                CDR ;
                                IF_LEFT
                                  { DUP ;
                                    CDR ;
                                    DIG 14 ;
                                    DUP ;
                                    DUG 15 ;
                                    SWAP ;
                                    EXEC ;
                                    DIG 2 ;
                                    DUP ;
                                    DUG 3 ;
                                    PUSH bool True ;
                                    SOME ;
                                    DIG 3 ;
                                    DUP ;
                                    DUG 4 ;
                                    CAR ;
                                    CAR ;
                                    DIG 4 ;
                                    DUP ;
                                    DUG 5 ;
                                    CAR ;
                                    CDR ;
                                    PAIR ;
                                    UPDATE ;
                                    DIP { DROP 2 } }
                                  { DUP ;
                                    CDR ;
                                    DIG 14 ;
                                    DUP ;
                                    DUG 15 ;
                                    SWAP ;
                                    EXEC ;
                                    DIG 2 ;
                                    DUP ;
                                    DUG 3 ;
                                    DIG 2 ;
                                    DUP ;
                                    DUG 3 ;
                                    CAR ;
                                    CAR ;
                                    DIG 3 ;
                                    DUP ;
                                    DUG 4 ;
                                    CAR ;
                                    CDR ;
                                    PAIR ;
                                    NONE bool ;
                                    SWAP ;
                                    UPDATE ;
                                    DIP { DROP 2 } } ;
                                DIP { DROP 2 } } ;
                         DIP { DROP } ;
                         DIG 3 ;
                         DUP ;
                         DUG 4 ;
                         DIG 1 ;
                         DUP ;
                         DUG 2 ;
                         DIP { DUP ; CAR ; SWAP ; CDR ; CDR } ;
                         PAIR ;
                         SWAP ;
                         PAIR ;
                         NIL operation ;
                         PAIR ;
                         DIP { DROP 2 } } ;
                     DIP { DROP } } ;
                 DIP { DROP 2 } ;
                 DIG 4 ;
                 DUP ;
                 DUG 5 ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 SWAP ;
                 CAR ;
                 PAIR ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 PAIR ;
                 DIP { DROP 3 } } ;
             DIP { DROP } }
           { DIG 1 ;
             DUP ;
             DUG 2 ;
             CAR ;
             DIG 3 ;
             DUP ;
             DUG 4 ;
             SWAP ;
             EXEC ;
             DIG 2 ;
             DUP ;
             DUG 3 ;
             CDR ;
             DIG 2 ;
             DUP ;
             DUG 3 ;
             PAIR ;
             DUP ;
             CDR ;
             DIG 1 ;
             DUP ;
             DUG 2 ;
             CAR ;
             IF_LEFT
               { DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 PAIR ;
                 DUP ;
                 CAR ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 DUP ;
                 CAR ;
                 CDR ;
                 CDR ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 MEM ;
                 NOT ;
                 IF { PUSH string "INVALID_PARAM" ; FAILWITH }
                    { DUP ;
                      CAR ;
                      CDR ;
                      DIG 1 ;
                      DUP ;
                      DUG 2 ;
                      CAR ;
                      CDR ;
                      CDR ;
                      DIG 3 ;
                      DUP ;
                      DUG 4 ;
                      PUSH bool False ;
                      SWAP ;
                      UPDATE ;
                      SWAP ;
                      CAR ;
                      PAIR ;
                      DIG 1 ;
                      DUP ;
                      DUG 2 ;
                      CAR ;
                      CDR ;
                      CAR ;
                      CDR ;
                      DIG 3 ;
                      DUP ;
                      DUG 4 ;
                      NONE (pair (pair (pair (nat %decimals) (map %extras string string))
                                       (pair (string %name) (string %symbol)))
                                 (nat %token_id)) ;
                      SWAP ;
                      UPDATE ;
                      DIP { DUP ; CDR ; SWAP ; CAR ; CAR } ;
                      SWAP ;
                      PAIR ;
                      PAIR ;
                      DIG 2 ;
                      DUP ;
                      DUG 3 ;
                      CDR ;
                      DIG 2 ;
                      DUP ;
                      DUG 3 ;
                      CAR ;
                      CAR ;
                      DIG 4 ;
                      DUP ;
                      DUG 5 ;
                      CAR ;
                      PAIR ;
                      PAIR ;
                      LEFT (pair (pair (nat %from_) (big_map %ledger nat address)) (nat %to_)) ;
                      LOOP_LEFT
                        { DUP ;
                          CDR ;
                          DIG 1 ;
                          DUP ;
                          DUG 2 ;
                          CAR ;
                          CAR ;
                          COMPARE ;
                          EQ ;
                          IF { DUP ; RIGHT (pair (pair (nat %from_) (big_map %ledger nat address)) (nat %to_)) }
                             { DUP ;
                               CDR ;
                               DIG 1 ;
                               DUP ;
                               DUG 2 ;
                               CAR ;
                               CDR ;
                               DIG 2 ;
                               DUP ;
                               DUG 3 ;
                               CAR ;
                               CAR ;
                               NONE address ;
                               SWAP ;
                               UPDATE ;
                               PUSH nat 1 ;
                               DIG 3 ;
                               DUP ;
                               DUG 4 ;
                               CAR ;
                               CAR ;
                               ADD ;
                               PAIR ;
                               PAIR ;
                               DUP ;
                               LEFT (pair (pair (nat %from_) (big_map %ledger nat address)) (nat %to_)) ;
                               DIP { DROP } } ;
                          DIP { DROP } } ;
                      DIG 2 ;
                      DUP ;
                      DUG 3 ;
                      DIG 2 ;
                      DUP ;
                      DUG 3 ;
                      DIP { DUP ; CDR ; SWAP ; CAR ; CAR } ;
                      SWAP ;
                      PAIR ;
                      PAIR ;
                      DIG 1 ;
                      DUP ;
                      DUG 2 ;
                      CAR ;
                      CDR ;
                      DIP { DUP ; CDR ; SWAP ; CAR ; CDR } ;
                      PAIR ;
                      PAIR ;
                      DIP { DROP 2 } } ;
                 DIP { DROP 4 } }
               { DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 PAIR ;
                 DUP ;
                 CAR ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 DIG 1 ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 CAR ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 CDR ;
                 CDR ;
                 SUB ;
                 ISNAT ;
                 DUP ;
                 IF_NONE
                   { PUSH string "INVALID_PARAM" ; FAILWITH }
                   { DIG 3 ;
                     DUP ;
                     DUG 4 ;
                     CAR ;
                     CDR ;
                     SIZE ;
                     DIG 1 ;
                     DUP ;
                     DUG 2 ;
                     COMPARE ;
                     NEQ ;
                     IF { PUSH string "INVALID_PARAM" ; FAILWITH } { UNIT } ;
                     DIP { DROP } } ;
                 DIP { DROP } ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 CDR ;
                 CAR ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 CAR ;
                 CDR ;
                 CAR ;
                 CAR ;
                 COMPARE ;
                 GT ;
                 IF { PUSH string "INVALID_PARAM" ; FAILWITH }
                    { DIG 2 ;
                      DUP ;
                      DUG 3 ;
                      CDR ;
                      CAR ;
                      DIG 3 ;
                      DUP ;
                      DUG 4 ;
                      CAR ;
                      CDR ;
                      PAIR ;
                      NIL (pair address nat) ;
                      DIG 1 ;
                      DUP ;
                      DUG 2 ;
                      CDR ;
                      PAIR ;
                      DIG 1 ;
                      DUP ;
                      DUG 2 ;
                      CAR ;
                      ITER { SWAP ;
                             PAIR ;
                             DUP ;
                             CAR ;
                             DUP ;
                             CDR ;
                             DIG 1 ;
                             DUP ;
                             DUG 2 ;
                             CAR ;
                             DIG 3 ;
                             DUP ;
                             DUG 4 ;
                             CDR ;
                             PAIR ;
                             CONS ;
                             PUSH nat 1 ;
                             DIG 2 ;
                             DUP ;
                             DUG 3 ;
                             CAR ;
                             ADD ;
                             PAIR ;
                             DIP { DROP 2 } } ;
                      DUP ;
                      CDR ;
                      DIP { DROP 2 } ;
                      DIG 2 ;
                      DUP ;
                      DUG 3 ;
                      CAR ;
                      CAR ;
                      DIG 1 ;
                      DUP ;
                      DUG 2 ;
                      ITER { SWAP ;
                             PAIR ;
                             DUP ;
                             CDR ;
                             DIG 1 ;
                             DUP ;
                             DUG 2 ;
                             CAR ;
                             DIG 1 ;
                             DUP ;
                             DUG 2 ;
                             CAR ;
                             DIG 2 ;
                             DUP ;
                             DUG 3 ;
                             CDR ;
                             SWAP ;
                             SOME ;
                             SWAP ;
                             UPDATE ;
                             DIP { DROP 2 } } ;
                      DIG 3 ;
                      DUP ;
                      DUG 4 ;
                      DIG 4 ;
                      DUP ;
                      DUG 5 ;
                      CAR ;
                      CDR ;
                      CDR ;
                      DIG 6 ;
                      DUP ;
                      DUG 7 ;
                      CDR ;
                      PUSH bool True ;
                      SWAP ;
                      UPDATE ;
                      DIG 5 ;
                      DUP ;
                      DUG 6 ;
                      CAR ;
                      CDR ;
                      CAR ;
                      CDR ;
                      DIG 7 ;
                      DUP ;
                      DUG 8 ;
                      CAR ;
                      CAR ;
                      DIG 8 ;
                      DUP ;
                      DUG 9 ;
                      CDR ;
                      SWAP ;
                      SOME ;
                      SWAP ;
                      UPDATE ;
                      DIG 7 ;
                      DUP ;
                      DUG 8 ;
                      CDR ;
                      CDR ;
                      PAIR ;
                      PAIR ;
                      DIP { DUP ; CDR ; SWAP ; CAR ; CAR } ;
                      SWAP ;
                      PAIR ;
                      PAIR ;
                      DIG 1 ;
                      DUP ;
                      DUG 2 ;
                      DIP { DUP ; CDR ; SWAP ; CAR ; CDR } ;
                      PAIR ;
                      PAIR ;
                      DIP { DROP 2 } } ;
                 DIP { DROP 5 } } ;
             DUP ;
             NIL operation ;
             PAIR ;
             DIP { DROP 3 } ;
             DIG 3 ;
             DUP ;
             DUG 4 ;
             DIG 1 ;
             DUP ;
             DUG 2 ;
             CDR ;
             SWAP ;
             CAR ;
             PAIR ;
             DIG 1 ;
             DUP ;
             DUG 2 ;
             CAR ;
             PAIR ;
             DIP { DROP 3 } } ;
         DIP { DROP 4 } } }

