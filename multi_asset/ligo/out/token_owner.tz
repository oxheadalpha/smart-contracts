{ parameter
    (or (or (unit %default)
            (pair %owner_add_operator (pair (address %fa2) (address %operator)) (nat %token_id)))
        (pair %owner_remove_operator
           (pair (address %fa2) (address %operator))
           (nat %token_id))) ;
  storage unit ;
  code { LAMBDA
           (pair (pair address address) nat)
           (pair address (pair address nat))
           { DUP ;
             CDR ;
             SWAP ;
             DUP ;
             DUG 2 ;
             CAR ;
             CAR ;
             PAIR ;
             SWAP ;
             CAR ;
             CDR ;
             PAIR } ;
         LAMBDA
           (pair (lambda (pair (pair address address) nat) (pair address (pair address nat)))
                 (or (pair (pair address address) nat) (pair (pair address address) nat)))
           (or (pair address (pair address nat)) (pair address (pair address nat)))
           { DUP ;
             CDR ;
             SWAP ;
             CAR ;
             SWAP ;
             IF_LEFT
               { EXEC ; LEFT (pair (address %owner) (pair (address %operator) (nat %token_id))) }
               { EXEC ; RIGHT (pair (address %owner) (pair (address %operator) (nat %token_id))) } ;
             IF_LEFT
               { LEFT (pair (address %owner) (pair (address %operator) (nat %token_id))) }
               { RIGHT (pair (address %owner) (pair (address %operator) (nat %token_id))) } } ;
         SWAP ;
         APPLY ;
         SWAP ;
         CAR ;
         IF_LEFT
           { IF_LEFT
               { SWAP ; DROP 2 ; UNIT ; NIL operation ; PAIR }
               { DUP ;
                 CDR ;
                 SELF ;
                 ADDRESS ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 CAR ;
                 CDR ;
                 PAIR ;
                 PAIR ;
                 LEFT (pair (pair (address %operator) (address %owner)) (nat %token_id)) ;
                 DIG 2 ;
                 SWAP ;
                 EXEC ;
                 SWAP ;
                 CAR ;
                 CAR ;
                 CONTRACT %update_operators
                   (list (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id)))
                             (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id))))) ;
                 IF_NONE
                   { PUSH string "bad address for get_entrypoint (%update_operators)" ;
                     FAILWITH }
                   {} ;
                 PUSH mutez 0 ;
                 NIL (or (pair address (pair address nat)) (pair address (pair address nat))) ;
                 DIG 3 ;
                 CONS ;
                 TRANSFER_TOKENS ;
                 UNIT ;
                 NIL operation ;
                 DIG 2 ;
                 CONS ;
                 PAIR } }
           { DUP ;
             CDR ;
             SELF ;
             ADDRESS ;
             DIG 2 ;
             DUP ;
             DUG 3 ;
             CAR ;
             CDR ;
             PAIR ;
             PAIR ;
             RIGHT (pair (pair (address %operator) (address %owner)) (nat %token_id)) ;
             DIG 2 ;
             SWAP ;
             EXEC ;
             SWAP ;
             CAR ;
             CAR ;
             CONTRACT %update_operators
               (list (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id)))
                         (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id))))) ;
             IF_NONE
               { PUSH string "bad address for get_entrypoint (%update_operators)" ;
                 FAILWITH }
               {} ;
             PUSH mutez 0 ;
             NIL (or (pair address (pair address nat)) (pair address (pair address nat))) ;
             DIG 3 ;
             CONS ;
             TRANSFER_TOKENS ;
             UNIT ;
             NIL operation ;
             DIG 2 ;
             CONS ;
             PAIR } } }

