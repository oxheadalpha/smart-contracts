{ parameter
    (or (or (or (pair %assert_is_operator
                   (address %mac)
                   (pair %request (address %operator) (address %owner)))
                (unit %default))
            (or (pair %is_operator_response (pair (address %operator) (address %owner)) bool)
                (pair %query (pair (address %mac) (address %owner)) (nat %token_id))))
        (list %response (pair (pair (address %owner) (nat %token_id)) nat))) ;
  storage
    (or (unit %empty) (pair %state (pair (nat %balance) (address %owner)) (nat %token_id))) ;
  code { DUP ;
         CDR ;
         DIP { DUP } ;
         SWAP ;
         CAR ;
         IF_LEFT
           { DUP ;
             IF_LEFT
               { DUP ;
                 IF_LEFT
                   { DUP ;
                     DUP ;
                     CAR ;
                     CONTRACT %is_operator
                       (pair (pair %is_operator_request (address %operator) (address %owner))
                             (contract %is_operator_view (pair (pair (address %operator) (address %owner)) bool))) ;
                     IF_NONE
                       { PUSH string "bad address for get_entrypoint (%is_operator)" ; FAILWITH }
                       {} ;
                     SELF ;
                     ADDRESS ;
                     CONTRACT %is_operator_response
                       (pair (pair (address %operator) (address %owner)) bool) ;
                     IF_NONE
                       { PUSH string "bad address for get_entrypoint (%is_operator_response)" ;
                         FAILWITH }
                       {} ;
                     DIP 2 { DUP } ;
                     DIG 2 ;
                     CDR ;
                     DIP { DUP } ;
                     PAIR ;
                     DIP { DIP { DUP } ; SWAP ; PUSH mutez 0 } ;
                     TRANSFER_TOKENS ;
                     DUP ;
                     NIL operation ;
                     SWAP ;
                     CONS ;
                     DIP { DIP 7 { DUP } ; DIG 7 } ;
                     PAIR ;
                     DIP { DROP 5 } }
                   { DIP 3 { DUP } ; DIG 3 ; NIL operation ; PAIR ; DIP { DROP } } ;
                 DIP { DROP } }
               { DUP ;
                 IF_LEFT
                   { DUP ;
                     CDR ;
                     IF { UNIT } { PUSH string "not an operator response" ; FAILWITH } ;
                     DIP 4 { DUP } ;
                     DIG 4 ;
                     NIL operation ;
                     PAIR ;
                     DIP { DROP 2 } }
                   { DUP ;
                     DUP ;
                     CAR ;
                     CDR ;
                     DIP { DUP ; CDR } ;
                     PAIR ;
                     NIL (pair (address %owner) (nat %token_id)) ;
                     SWAP ;
                     CONS ;
                     DIP { SELF ;
                           ADDRESS ;
                           CONTRACT %response (list (pair (pair (address %owner) (nat %token_id)) nat)) ;
                           IF_NONE
                             { PUSH string "bad address for get_entrypoint (%response)" ; FAILWITH }
                             {} } ;
                     PAIR ;
                     DIP { DUP } ;
                     SWAP ;
                     CAR ;
                     CAR ;
                     CONTRACT %balance_of
                       (pair (list %balance_requests (pair (address %owner) (nat %token_id)))
                             (contract %balance_view (list (pair (pair (address %owner) (nat %token_id)) nat)))) ;
                     IF_NONE
                       { PUSH string "bad address for get_entrypoint (%balance_of)" ; FAILWITH }
                       {} ;
                     DIP { DUP } ;
                     SWAP ;
                     DIP { DUP ; PUSH mutez 0 } ;
                     TRANSFER_TOKENS ;
                     DUP ;
                     NIL operation ;
                     SWAP ;
                     CONS ;
                     DIP { DIP 7 { DUP } ; DIG 7 } ;
                     PAIR ;
                     DIP { DROP 5 } } ;
                 DIP { DROP } } ;
             DIP { DROP } }
           { DUP ;
             IF_CONS
               { DUP ;
                 CDR ;
                 DIP { DUP ; CAR ; CAR } ;
                 PAIR ;
                 DIP { DUP ; CAR ; CDR } ;
                 PAIR ;
                 DIP { DROP 2 } }
               { PUSH string "invalid response" ; FAILWITH } ;
             DUP ;
             RIGHT unit ;
             NIL operation ;
             PAIR ;
             DIP { DROP 2 } } ;
         DIP { DROP 2 } } }
