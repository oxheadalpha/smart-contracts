{ parameter
    (or (or (or %admin (or (unit %confirm_admin) (bool %pause)) (address %set_admin))
            (or %assets
               (or (pair %balance_of
                      (list %requests (pair (address %owner) (nat %token_id)))
                      (contract %callback
                         (list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)))))
                   (list %transfer
                      (pair (address %from_) (list %txs (pair (address %to_) (nat %token_id) (nat %amount))))))
               (list %update_operators
                  (or (pair %add_operator (address %owner) (address %operator) (nat %token_id))
                      (pair %remove_operator (address %owner) (address %operator) (nat %token_id))))))
        (or %tokens
           (list %burn_tokens (pair (address %owner) (nat %amount)))
           (list %mint_tokens (pair (address %owner) (nat %amount))))) ;
  storage
    (pair (pair (pair %admin (pair (address %admin) (bool %paused)) (option %pending_admin address))
                (pair %assets
                   (pair (pair (big_map %ledger address nat)
                               (big_map %operators (pair address address nat) unit))
                         (pair %permissions
                            (or %operator
                               (unit %no_transfer)
                               (or (unit %owner_transfer) (unit %owner_or_operator_transfer)))
                            (or %receiver
                               (unit %owner_no_hook)
                               (or (unit %optional_owner_hook) (unit %required_owner_hook)))
                            (or %sender
                               (unit %owner_no_hook)
                               (or (unit %optional_owner_hook) (unit %required_owner_hook)))
                            (option %custom (pair (string %tag) (option %config_api address))))
                         (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))))
                   (nat %total_supply)))
          (big_map %metadata string bytes)) ;
  code { PUSH string "FA2_TOKEN_UNDEFINED" ;
         PUSH string "FA2_INSUFFICIENT_BALANCE" ;
         LAMBDA
           (pair (pair (pair (list (pair (option address) (list (pair (option address) nat nat)))) address)
                       (lambda (pair (option address) (list (pair (option address) nat nat))) (list (option address))))
                 (lambda
                    address
                    (or (contract (pair (list (pair (option address) (list (pair (option address) nat nat)))) address))
                        string))
                 bool)
           (list (contract (pair (list (pair (option address) (list (pair (option address) nat nat)))) address)))
           { UNPAIR ;
             UNPAIR ;
             DIG 2 ;
             UNPAIR ;
             EMPTY_SET address ;
             DIG 3 ;
             CAR ;
             ITER { DUP 5 ;
                    SWAP ;
                    EXEC ;
                    ITER { IF_NONE {} { PUSH bool True ; SWAP ; UPDATE } } } ;
             DIG 3 ;
             DROP ;
             NIL (contract (pair (list (pair (option address) (list (pair (option address) nat nat)))) address)) ;
             SWAP ;
             ITER { DUP 3 ;
                    SWAP ;
                    EXEC ;
                    IF_LEFT { CONS } { DUP 4 ; IF { SWAP ; DROP ; FAILWITH } { DROP } } } ;
             SWAP ;
             DIG 2 ;
             DROP 2 } ;
         LAMBDA
           (pair (lambda
                    (pair (pair (pair (list (pair (option address) (list (pair (option address) nat nat)))) address)
                                (lambda (pair (option address) (list (pair (option address) nat nat))) (list (option address))))
                          (lambda
                             address
                             (or (contract (pair (list (pair (option address) (list (pair (option address) nat nat)))) address))
                                 string))
                          bool)
                    (list (contract (pair (list (pair (option address) (list (pair (option address) nat nat)))) address))))
                 (pair (pair (pair (list (pair (option address) (list (pair (option address) nat nat)))) address)
                             (or unit (or unit unit)))
                       (lambda (pair (option address) (list (pair (option address) nat nat))) (list (option address)))
                       (lambda
                          address
                          (or (contract (pair (list (pair (option address) (list (pair (option address) nat nat)))) address))
                              string))))
           (list (contract (pair (list (pair (option address) (list (pair (option address) nat nat)))) address)))
           { UNPAIR ;
             SWAP ;
             UNPAIR ;
             UNPAIR ;
             DIG 2 ;
             UNPAIR ;
             DIG 3 ;
             IF_LEFT
               { DROP 5 ;
                 NIL (contract (pair (list (pair (option address) (list (pair (option address) nat nat)))) address)) }
               { IF_LEFT
                   { DROP ;
                     PUSH bool False ;
                     DIG 2 ;
                     PAIR ;
                     SWAP ;
                     DIG 2 ;
                     PAIR ;
                     PAIR ;
                     EXEC }
                   { DROP ; PUSH bool True ; DIG 2 ; PAIR ; SWAP ; DIG 2 ; PAIR ; PAIR ; EXEC } } } ;
         DUP 2 ;
         APPLY ;
         SWAP ;
         DROP ;
         LAMBDA
           (pair address (big_map address nat))
           nat
           { UNPAIR ; GET ; IF_NONE { PUSH nat 0 } {} } ;
         LAMBDA
           (pair (pair (lambda (pair address (big_map address nat)) nat)
                       (lambda
                          (pair (pair (pair (list (pair (option address) (list (pair (option address) nat nat)))) address)
                                      (or unit (or unit unit)))
                                (lambda (pair (option address) (list (pair (option address) nat nat))) (list (option address)))
                                (lambda
                                   address
                                   (or (contract (pair (list (pair (option address) (list (pair (option address) nat nat)))) address))
                                       string)))
                          (list (contract (pair (list (pair (option address) (list (pair (option address) nat nat)))) address))))
                       string
                       string)
                 (pair (pair (list (pair (option address) (list (pair (option address) nat nat))))
                             (lambda (pair (pair address address) nat (big_map (pair address address nat) unit)) unit))
                       (pair (pair (big_map address nat) (big_map (pair address address nat) unit))
                             (pair (or unit (or unit unit))
                                   (or unit (or unit unit))
                                   (or unit (or unit unit))
                                   (option (pair string (option address))))
                             (big_map nat (pair nat (map string bytes))))
                       nat))
           (pair (list operation)
                 (pair (pair (big_map address nat) (big_map (pair address address nat) unit))
                       (pair (or unit (or unit unit))
                             (or unit (or unit unit))
                             (or unit (or unit unit))
                             (option (pair string (option address))))
                       (big_map nat (pair nat (map string bytes))))
                 nat)
           { UNPAIR ;
             UNPAIR 4 ;
             DIG 4 ;
             UNPAIR ;
             UNPAIR ;
             DUP 3 ;
             CAR ;
             CAR ;
             CAR ;
             DUP 2 ;
             ITER { SWAP ;
                    SENDER ;
                    SWAP ;
                    DUP 3 ;
                    CDR ;
                    ITER { SWAP ;
                           PUSH nat 0 ;
                           DUP 3 ;
                           GET 3 ;
                           COMPARE ;
                           NEQ ;
                           IF { DROP 2 ; DUP 9 ; FAILWITH }
                              { DUP 4 ;
                                CAR ;
                                IF_NONE
                                  {}
                                  { DUP 8 ;
                                    CAR ;
                                    CAR ;
                                    CDR ;
                                    DUP 4 ;
                                    GET 3 ;
                                    PAIR ;
                                    DUP 5 ;
                                    DUP 3 ;
                                    PAIR ;
                                    PAIR ;
                                    DUP 8 ;
                                    SWAP ;
                                    EXEC ;
                                    DROP ;
                                    DUP 2 ;
                                    DUP 2 ;
                                    PAIR ;
                                    DUP 10 ;
                                    SWAP ;
                                    EXEC ;
                                    DUP 4 ;
                                    GET 4 ;
                                    SWAP ;
                                    SUB ;
                                    ISNAT ;
                                    IF_NONE
                                      { DROP 2 ; DUP 9 ; FAILWITH }
                                      { PUSH nat 0 ;
                                        DUP 2 ;
                                        COMPARE ;
                                        EQ ;
                                        IF { DROP ; NONE nat ; SWAP ; UPDATE }
                                           { DIG 2 ; SWAP ; SOME ; DIG 2 ; UPDATE } } } ;
                                DUP 2 ;
                                CAR ;
                                IF_NONE
                                  { SWAP ; DROP }
                                  { DUP 2 ;
                                    DUP 2 ;
                                    PAIR ;
                                    DUP 10 ;
                                    SWAP ;
                                    EXEC ;
                                    DIG 3 ;
                                    GET 4 ;
                                    ADD ;
                                    PUSH nat 0 ;
                                    DUP 2 ;
                                    COMPARE ;
                                    EQ ;
                                    IF { DROP ; NONE nat ; SWAP ; UPDATE }
                                       { DIG 2 ; SWAP ; SOME ; DIG 2 ; UPDATE } } } } ;
                    SWAP ;
                    DIG 2 ;
                    DROP 2 } ;
             DIG 2 ;
             DIG 4 ;
             DIG 6 ;
             DIG 7 ;
             DROP 4 ;
             SENDER ;
             DIG 2 ;
             PAIR ;
             DUP 3 ;
             CAR ;
             CDR ;
             CAR ;
             LAMBDA
               address
               (or (contract (pair (list (pair (option address) (list (pair (option address) nat nat)))) address))
                   string)
               { CONTRACT %tokens_sent
                   (pair (list %batch
                            (pair (option %from_ address)
                                  (list %txs (pair (option %to_ address) (nat %token_id) (nat %amount)))))
                         (address %operator)) ;
                 IF_NONE
                   { PUSH string "FA2_SENDER_HOOK_UNDEFINED" ;
                     RIGHT
                       (contract (pair (list (pair (option address) (list (pair (option address) nat nat)))) address)) }
                   { LEFT string } } ;
             LAMBDA
               (pair (option address) (list (pair (option address) nat nat)))
               (list (option address))
               { NIL (option address) ; SWAP ; CAR ; CONS } ;
             PAIR ;
             DUP 2 ;
             GET 5 ;
             DUP 4 ;
             PAIR ;
             PAIR ;
             DUP 6 ;
             SWAP ;
             EXEC ;
             LAMBDA
               address
               (or (contract (pair (list (pair (option address) (list (pair (option address) nat nat)))) address))
                   string)
               { CONTRACT %tokens_received
                   (pair (list %batch
                            (pair (option %from_ address)
                                  (list %txs (pair (option %to_ address) (nat %token_id) (nat %amount)))))
                         (address %operator)) ;
                 IF_NONE
                   { PUSH string "FA2_RECEIVER_HOOK_UNDEFINED" ;
                     RIGHT
                       (contract (pair (list (pair (option address) (list (pair (option address) nat nat)))) address)) }
                   { LEFT string } } ;
             LAMBDA
               (pair (option address) (list (pair (option address) nat nat)))
               (list (option address))
               { CDR ; MAP { CAR } } ;
             PAIR ;
             DIG 2 ;
             GET 3 ;
             DUP 4 ;
             PAIR ;
             PAIR ;
             DIG 5 ;
             SWAP ;
             EXEC ;
             ITER { CONS } ;
             DUP ;
             IF_CONS
               { DROP 2 ; MAP { PUSH mutez 0 ; DUP 3 ; TRANSFER_TOKENS } ; SWAP ; DROP }
               { DROP 2 ; NIL operation } ;
             DUP 3 ;
             CDR ;
             DUP 4 ;
             CAR ;
             CDR ;
             DIG 4 ;
             CAR ;
             CAR ;
             CDR ;
             DIG 4 ;
             PAIR ;
             PAIR ;
             PAIR ;
             SWAP ;
             PAIR } ;
         DUP 5 ;
         DUP 5 ;
         DUP 5 ;
         DUP 5 ;
         PAIR 4 ;
         APPLY ;
         DIG 2 ;
         DROP ;
         LAMBDA
           (list (pair address nat))
           nat
           { PUSH nat 0 ; SWAP ; ITER { CDR ; ADD } } ;
         LAMBDA
           (pair (pair address bool) (option address))
           unit
           { CAR ;
             CAR ;
             SENDER ;
             COMPARE ;
             NEQ ;
             IF { PUSH string "NOT_AN_ADMIN" ; FAILWITH } { UNIT } } ;
         DIG 6 ;
         UNPAIR ;
         IF_LEFT
           { DIG 3 ;
             DIG 6 ;
             DROP 2 ;
             IF_LEFT
               { DIG 3 ;
                 DIG 4 ;
                 DIG 5 ;
                 DROP 3 ;
                 DUP 2 ;
                 CAR ;
                 CAR ;
                 SWAP ;
                 IF_LEFT
                   { IF_LEFT
                       { DIG 3 ;
                         DROP 2 ;
                         DUP ;
                         CDR ;
                         IF_NONE
                           { DROP ; PUSH string "NO_PENDING_ADMIN" ; FAILWITH }
                           { SENDER ;
                             SWAP ;
                             DUP 2 ;
                             COMPARE ;
                             EQ ;
                             IF { NONE address ; DIG 2 ; CAR ; CDR ; DIG 2 ; PAIR ; PAIR }
                                { DROP 2 ; PUSH string "NOT_A_PENDING_ADMIN" ; FAILWITH } } }
                       { DUP 2 ;
                         DIG 4 ;
                         SWAP ;
                         EXEC ;
                         DROP ;
                         DUP 2 ;
                         CDR ;
                         SWAP ;
                         DIG 2 ;
                         CAR ;
                         CAR ;
                         PAIR ;
                         PAIR } }
                   { DUP 2 ; DIG 4 ; SWAP ; EXEC ; DROP ; SOME ; SWAP ; CAR ; PAIR } ;
                 NIL operation ;
                 DUP 3 ;
                 CDR ;
                 DIG 3 ;
                 CAR ;
                 CDR ;
                 DIG 3 }
               { DIG 2 ;
                 DROP ;
                 DUP 2 ;
                 CAR ;
                 CAR ;
                 CAR ;
                 CDR ;
                 IF { PUSH string "PAUSED" ; FAILWITH } {} ;
                 DUP 2 ;
                 CAR ;
                 CDR ;
                 SWAP ;
                 IF_LEFT
                   { IF_LEFT
                       { DIG 3 ;
                         DROP ;
                         DUP ;
                         CAR ;
                         MAP { PUSH nat 0 ;
                               DUP 2 ;
                               CDR ;
                               COMPARE ;
                               NEQ ;
                               IF { DROP ; DUP 5 ; FAILWITH }
                                  { DUP 3 ;
                                    CAR ;
                                    CAR ;
                                    CAR ;
                                    DUP 2 ;
                                    CAR ;
                                    PAIR ;
                                    DUP 6 ;
                                    SWAP ;
                                    EXEC ;
                                    SWAP ;
                                    PAIR } } ;
                         DIG 4 ;
                         DIG 5 ;
                         DROP 2 ;
                         SWAP ;
                         CDR ;
                         PUSH mutez 0 ;
                         DIG 2 ;
                         TRANSFER_TOKENS ;
                         SWAP ;
                         NIL operation ;
                         DIG 2 ;
                         CONS ;
                         PAIR }
                       { DIG 4 ;
                         DIG 5 ;
                         DROP 2 ;
                         MAP { DUP ;
                               CDR ;
                               MAP { DUP ; GET 4 ; DUP 2 ; GET 3 ; DIG 2 ; CAR ; SOME ; PAIR 3 } ;
                               SWAP ;
                               CAR ;
                               SOME ;
                               PAIR } ;
                         SWAP ;
                         LAMBDA
                           (pair (pair address address) nat (big_map (pair address address nat) unit))
                           unit
                           { UNPAIR ;
                             UNPAIR ;
                             DIG 2 ;
                             UNPAIR ;
                             DUP 4 ;
                             DUP 4 ;
                             COMPARE ;
                             EQ ;
                             IF { DROP 4 ; UNIT }
                                { DIG 3 ;
                                  PAIR ;
                                  DIG 2 ;
                                  PAIR ;
                                  MEM ;
                                  IF { UNIT } { PUSH string "FA2_NOT_OPERATOR" ; FAILWITH } } } ;
                         DIG 2 ;
                         PAIR ;
                         PAIR ;
                         DIG 2 ;
                         SWAP ;
                         EXEC } }
                   { DIG 3 ;
                     DIG 4 ;
                     DIG 5 ;
                     DROP 3 ;
                     SENDER ;
                     DUP 3 ;
                     CAR ;
                     CAR ;
                     CDR ;
                     DIG 2 ;
                     ITER { SWAP ;
                            DUP 3 ;
                            DUP 3 ;
                            IF_LEFT {} {} ;
                            CAR ;
                            COMPARE ;
                            EQ ;
                            IF {} { PUSH string "FA2_NOT_OWNER" ; FAILWITH } ;
                            SWAP ;
                            IF_LEFT
                              { SWAP ;
                                UNIT ;
                                SOME ;
                                DUP 3 ;
                                GET 4 ;
                                DUP 4 ;
                                GET 3 ;
                                PAIR ;
                                DIG 3 ;
                                CAR ;
                                PAIR ;
                                UPDATE }
                              { SWAP ;
                                DUP 2 ;
                                GET 4 ;
                                DUP 3 ;
                                GET 3 ;
                                PAIR ;
                                DIG 2 ;
                                CAR ;
                                PAIR ;
                                NONE unit ;
                                SWAP ;
                                UPDATE } } ;
                     SWAP ;
                     DROP ;
                     DUP 2 ;
                     CDR ;
                     DUP 3 ;
                     CAR ;
                     CDR ;
                     DIG 2 ;
                     DIG 3 ;
                     CAR ;
                     CAR ;
                     CAR ;
                     PAIR ;
                     PAIR ;
                     PAIR ;
                     NIL operation ;
                     PAIR } ;
                 UNPAIR ;
                 DUP 3 ;
                 CDR ;
                 DIG 2 ;
                 DIG 3 ;
                 CAR ;
                 CAR } }
           { DIG 5 ;
             DIG 7 ;
             DROP 2 ;
             DUP 2 ;
             CAR ;
             CAR ;
             DIG 3 ;
             SWAP ;
             EXEC ;
             DROP ;
             DUP 2 ;
             CAR ;
             CDR ;
             SWAP ;
             IF_LEFT
               { DUP ;
                 MAP { NIL (pair (option address) nat nat) ;
                       DUP 2 ;
                       CDR ;
                       PUSH nat 0 ;
                       NONE address ;
                       PAIR 3 ;
                       CONS ;
                       SWAP ;
                       CAR ;
                       SOME ;
                       PAIR } ;
                 DUP 3 ;
                 LAMBDA
                   (pair (pair address address) nat (big_map (pair address address nat) unit))
                   unit
                   { DROP ; UNIT } ;
                 DIG 2 ;
                 PAIR ;
                 PAIR ;
                 DIG 5 ;
                 SWAP ;
                 EXEC ;
                 UNPAIR ;
                 DIG 2 ;
                 DIG 5 ;
                 SWAP ;
                 EXEC ;
                 DIG 3 ;
                 CDR ;
                 SUB ;
                 ISNAT ;
                 IF_NONE { DIG 3 ; FAILWITH } { DIG 4 ; DROP } ;
                 DIG 2 ;
                 CAR }
               { DIG 5 ;
                 DROP ;
                 DUP ;
                 MAP { DUP ; CDR ; PUSH nat 0 ; DIG 2 ; CAR ; SOME ; PAIR 3 } ;
                 DUP 3 ;
                 LAMBDA
                   (pair (pair address address) nat (big_map (pair address address nat) unit))
                   unit
                   { DROP ; UNIT } ;
                 NIL (pair (option address) (list (pair (option address) nat nat))) ;
                 DIG 3 ;
                 NONE address ;
                 PAIR ;
                 CONS ;
                 PAIR ;
                 PAIR ;
                 DIG 5 ;
                 SWAP ;
                 EXEC ;
                 UNPAIR ;
                 DIG 2 ;
                 DIG 5 ;
                 SWAP ;
                 EXEC ;
                 DIG 3 ;
                 CDR ;
                 ADD ;
                 DIG 2 ;
                 CAR } ;
             PAIR ;
             SWAP ;
             DUP 3 ;
             CDR ;
             DIG 2 ;
             DIG 3 ;
             CAR ;
             CAR } ;
         PAIR ;
         PAIR ;
         SWAP ;
         PAIR } }

