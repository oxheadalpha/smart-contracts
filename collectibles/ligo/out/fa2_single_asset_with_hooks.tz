{ parameter
    (or (contract %permissions_descriptor
           (pair (or %operator
                    (unit %no_transfer)
                    (or (unit %owner_transfer) (unit %owner_or_operator_transfer)))
                 (pair (or %receiver
                          (unit %owner_no_hook)
                          (or (unit %optional_owner_hook) (unit %required_owner_hook)))
                       (pair (or %sender
                                (unit %owner_no_hook)
                                (or (unit %optional_owner_hook) (unit %required_owner_hook)))
                             (option %custom (pair (string %tag) (option %config_api address)))))))
        (or %sA
           (or (or %admin (or (unit %confirm_admin) (bool %pause)) (address %set_admin))
               (or %assets
                  (or (pair %balance_of
                         (list %requests (pair (address %owner) (nat %token_id)))
                         (contract %callback
                            (list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)))))
                      (contract %token_metadata_registry address))
                  (or (list %transfer
                         (pair (address %from_)
                               (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))))
                      (list %update_operators
                         (or (pair %add_operator (address %owner) (pair (address %operator) (nat %token_id)))
                             (pair %remove_operator (address %owner) (pair (address %operator) (nat %token_id))))))))
           (or %tokens
              (list %burn_tokens (pair (nat %amount) (address %owner)))
              (list %mint_tokens (pair (nat %amount) (address %owner)))))) ;
  storage
    (pair (pair %admin (pair (address %admin) (bool %paused)) (option %pending_admin address))
          (pair %assets
             (pair (pair (big_map %ledger address nat)
                         (big_map %operators (pair address (pair address nat)) unit))
                   (pair (pair %permissions_descriptor
                            (pair (option %custom (pair (option %config_api address) (string %tag)))
                                  (or %operator
                                     (or (unit %no_transfer) (unit %owner_or_operator_transfer))
                                     (unit %owner_transfer)))
                            (pair (or %receiver
                                     (or (unit %optional_owner_hook) (unit %owner_no_hook))
                                     (unit %required_owner_hook))
                                  (or %sender
                                     (or (unit %optional_owner_hook) (unit %owner_no_hook))
                                     (unit %required_owner_hook))))
                         (big_map %token_metadata
                            nat
                            (pair (nat %token_id)
                                  (pair (string %symbol)
                                        (pair (string %name) (pair (nat %decimals) (map %extras string string))))))))
             (nat %total_supply))) ;
  code { PUSH string "FA2_TOKEN_UNDEFINED" ;
         PUSH string "FA2_INSUFFICIENT_BALANCE" ;
         LAMBDA
           (pair address (pair address nat))
           (pair (pair address address) nat)
           { DUP ;
             CDR ;
             CDR ;
             SWAP ;
             DUP ;
             DUG 2 ;
             CAR ;
             DIG 2 ;
             CDR ;
             CAR ;
             PAIR ;
             PAIR } ;
         LAMBDA
           (pair (pair (pair (list (pair (option address) (list (pair (pair nat (option address)) nat)))) address)
                       (lambda
                          (pair (option address) (list (pair (pair nat (option address)) nat)))
                          (list (option address))))
                 (pair (lambda
                          address
                          (or (contract
                                 (pair (list (pair (option address) (list (pair (option address) (pair nat nat))))) address))
                              string))
                       bool))
           (list (contract
                    (pair (list (pair (option address) (list (pair (option address) (pair nat nat))))) address)))
           { DUP ;
             CAR ;
             CDR ;
             SWAP ;
             DUP ;
             DUG 2 ;
             CAR ;
             CAR ;
             CAR ;
             PAIR ;
             EMPTY_SET address ;
             SWAP ;
             DUP ;
             DUG 2 ;
             CAR ;
             ITER { SWAP ;
                    PAIR ;
                    DUP ;
                    CDR ;
                    DIG 2 ;
                    DUP ;
                    DUG 3 ;
                    CDR ;
                    SWAP ;
                    EXEC ;
                    SWAP ;
                    CAR ;
                    SWAP ;
                    ITER { IF_NONE {} { PUSH bool True ; SWAP ; UPDATE } } } ;
             SWAP ;
             DROP ;
             NIL (contract
                    (pair (list (pair (option address) (list (pair (option address) (pair nat nat))))) address)) ;
             SWAP ;
             ITER { DIG 2 ;
                    DUP ;
                    DUG 3 ;
                    CDR ;
                    CAR ;
                    SWAP ;
                    EXEC ;
                    IF_LEFT
                      { CONS }
                      { DIG 2 ;
                        DUP ;
                        DUG 3 ;
                        CDR ;
                        CDR ;
                        IF { SWAP ; DROP ; FAILWITH } { DROP } } } ;
             SWAP ;
             DROP } ;
         LAMBDA
           (pair (lambda
                    (pair (pair (pair (list (pair (option address) (list (pair (pair nat (option address)) nat)))) address)
                                (lambda
                                   (pair (option address) (list (pair (pair nat (option address)) nat)))
                                   (list (option address))))
                          (pair (lambda
                                   address
                                   (or (contract
                                          (pair (list (pair (option address) (list (pair (option address) (pair nat nat))))) address))
                                       string))
                                bool))
                    (list (contract
                             (pair (list (pair (option address) (list (pair (option address) (pair nat nat))))) address))))
                 (pair (pair (pair (list (pair (option address) (list (pair (pair nat (option address)) nat)))) address)
                             (or (or unit unit) unit))
                       (pair (lambda
                                (pair (option address) (list (pair (pair nat (option address)) nat)))
                                (list (option address)))
                             (lambda
                                address
                                (or (contract
                                       (pair (list (pair (option address) (list (pair (option address) (pair nat nat))))) address))
                                    string)))))
           (list (contract
                    (pair (list (pair (option address) (list (pair (option address) (pair nat nat))))) address)))
           { DUP ;
             CDR ;
             SWAP ;
             CAR ;
             SWAP ;
             DUP ;
             CDR ;
             CDR ;
             SWAP ;
             DUP ;
             DUG 2 ;
             CDR ;
             CAR ;
             DIG 2 ;
             DUP ;
             DUG 3 ;
             CAR ;
             CAR ;
             DIG 3 ;
             CAR ;
             CDR ;
             IF_LEFT
               { IF_LEFT
                   { DROP ; PUSH bool False ; DIG 3 ; PAIR ; DUG 2 ; PAIR ; PAIR ; EXEC }
                   { SWAP ;
                     DROP ;
                     SWAP ;
                     DROP ;
                     SWAP ;
                     DROP ;
                     SWAP ;
                     DROP 2 ;
                     NIL (contract
                            (pair (list (pair (option address) (list (pair (option address) (pair nat nat))))) address)) } }
               { DROP ; PUSH bool True ; DIG 3 ; PAIR ; DUG 2 ; PAIR ; PAIR ; EXEC } } ;
         SWAP ;
         APPLY ;
         LAMBDA
           (pair address (big_map address nat))
           nat
           { DUP ; CDR ; SWAP ; CAR ; GET ; IF_NONE { PUSH nat 0 } {} } ;
         DIG 4 ;
         DUP ;
         DUG 5 ;
         DIG 4 ;
         DUP ;
         DUG 5 ;
         DIG 3 ;
         DIG 3 ;
         DUP ;
         DUG 4 ;
         PAIR ;
         PAIR ;
         PAIR ;
         LAMBDA
           (pair (pair (pair (pair (lambda (pair address (big_map address nat)) nat)
                                   (lambda
                                      (pair (pair (pair (list (pair (option address) (list (pair (pair nat (option address)) nat)))) address)
                                                  (or (or unit unit) unit))
                                            (pair (lambda
                                                     (pair (option address) (list (pair (pair nat (option address)) nat)))
                                                     (list (option address)))
                                                  (lambda
                                                     address
                                                     (or (contract
                                                            (pair (list (pair (option address) (list (pair (option address) (pair nat nat))))) address))
                                                         string))))
                                      (list (contract
                                               (pair (list (pair (option address) (list (pair (option address) (pair nat nat))))) address)))))
                             string)
                       string)
                 (pair (pair (list (pair (option address) (list (pair (pair nat (option address)) nat))))
                             (lambda
                                (pair (pair address address) (pair nat (big_map (pair address (pair address nat)) unit)))
                                unit))
                       (pair (pair (pair (big_map address nat) (big_map (pair address (pair address nat)) unit))
                                   (pair (pair (pair (option (pair (option address) string)) (or (or unit unit) unit))
                                               (pair (or (or unit unit) unit) (or (or unit unit) unit)))
                                         (big_map nat (pair nat (pair string (pair string (pair nat (map string string))))))))
                             nat)))
           (pair (list operation)
                 (pair (pair (pair (big_map address nat) (big_map (pair address (pair address nat)) unit))
                             (pair (pair (pair (option (pair (option address) string)) (or (or unit unit) unit))
                                         (pair (or (or unit unit) unit) (or (or unit unit) unit)))
                                   (big_map nat (pair nat (pair string (pair string (pair nat (map string string))))))))
                       nat))
           { DUP ;
             CDR ;
             SWAP ;
             CAR ;
             DUP ;
             CDR ;
             SWAP ;
             CAR ;
             DUP ;
             CDR ;
             SWAP ;
             CAR ;
             DUP ;
             CDR ;
             SWAP ;
             CAR ;
             DIG 4 ;
             DUP ;
             CDR ;
             SWAP ;
             DUP ;
             DUG 2 ;
             CAR ;
             CAR ;
             SWAP ;
             DUP ;
             DUG 2 ;
             CAR ;
             CAR ;
             CAR ;
             DIG 2 ;
             DUP ;
             DUG 3 ;
             CAR ;
             CAR ;
             CDR ;
             PAIR ;
             DIG 3 ;
             CAR ;
             CDR ;
             DIG 2 ;
             DUP ;
             DUG 3 ;
             PAIR ;
             PAIR ;
             DUP ;
             CDR ;
             CDR ;
             SWAP ;
             DUP ;
             DUG 2 ;
             CAR ;
             CAR ;
             ITER { DUP ;
                    DUG 2 ;
                    CDR ;
                    ITER { PUSH nat 0 ;
                           SWAP ;
                           DUP ;
                           DUG 2 ;
                           CDR ;
                           COMPARE ;
                           NEQ ;
                           IF { DROP 2 ; DIG 7 ; DUP ; DUG 8 ; FAILWITH }
                              { DIG 2 ;
                                DUP ;
                                DUG 3 ;
                                CAR ;
                                IF_NONE
                                  { SWAP }
                                  { DIG 4 ;
                                    DUP ;
                                    DUG 5 ;
                                    CDR ;
                                    CAR ;
                                    DIG 2 ;
                                    DUP ;
                                    DUG 3 ;
                                    CDR ;
                                    PAIR ;
                                    SENDER ;
                                    DIG 2 ;
                                    DUP ;
                                    DUG 3 ;
                                    PAIR ;
                                    PAIR ;
                                    DIG 5 ;
                                    DUP ;
                                    DUG 6 ;
                                    CAR ;
                                    CDR ;
                                    SWAP ;
                                    EXEC ;
                                    DROP ;
                                    DUG 2 ;
                                    DUP ;
                                    DUG 3 ;
                                    CAR ;
                                    CAR ;
                                    DIG 2 ;
                                    PAIR ;
                                    PAIR ;
                                    DUP ;
                                    CDR ;
                                    SWAP ;
                                    DUP ;
                                    DUG 2 ;
                                    CAR ;
                                    CAR ;
                                    SWAP ;
                                    DUP ;
                                    DUG 2 ;
                                    SWAP ;
                                    DUP ;
                                    DUG 2 ;
                                    PAIR ;
                                    DIG 9 ;
                                    DUP ;
                                    DUG 10 ;
                                    SWAP ;
                                    EXEC ;
                                    DIG 3 ;
                                    CAR ;
                                    CDR ;
                                    SWAP ;
                                    SUB ;
                                    ISNAT ;
                                    IF_NONE
                                      { DROP 2 ; DIG 7 ; DUP ; DUG 8 ; FAILWITH }
                                      { PUSH nat 0 ;
                                        SWAP ;
                                        DUP ;
                                        DUG 2 ;
                                        COMPARE ;
                                        EQ ;
                                        IF { DROP ; NONE nat ; SWAP ; UPDATE }
                                           { DIG 2 ; SWAP ; SOME ; DIG 2 ; UPDATE } } } ;
                                SWAP ;
                                DUP ;
                                DUG 2 ;
                                CAR ;
                                CDR ;
                                IF_NONE
                                  { SWAP ; DROP }
                                  { SWAP ;
                                    DIG 2 ;
                                    CAR ;
                                    CAR ;
                                    DIG 2 ;
                                    PAIR ;
                                    PAIR ;
                                    DUP ;
                                    CDR ;
                                    SWAP ;
                                    DUP ;
                                    DUG 2 ;
                                    CAR ;
                                    CAR ;
                                    SWAP ;
                                    DUP ;
                                    DUG 2 ;
                                    SWAP ;
                                    DUP ;
                                    DUG 2 ;
                                    PAIR ;
                                    DIG 8 ;
                                    DUP ;
                                    DUG 9 ;
                                    SWAP ;
                                    EXEC ;
                                    DIG 3 ;
                                    CAR ;
                                    CDR ;
                                    ADD ;
                                    PUSH nat 0 ;
                                    SWAP ;
                                    DUP ;
                                    DUG 2 ;
                                    COMPARE ;
                                    EQ ;
                                    IF { DROP ; NONE nat ; SWAP ; UPDATE }
                                       { DIG 2 ; SWAP ; SOME ; DIG 2 ; UPDATE } } } } ;
                    SWAP ;
                    DROP } ;
             SWAP ;
             DROP ;
             DIG 3 ;
             DROP ;
             DIG 4 ;
             DROP ;
             DIG 4 ;
             DROP ;
             DIG 2 ;
             DUP ;
             DUG 3 ;
             DIG 2 ;
             PAIR ;
             SENDER ;
             SWAP ;
             DUP ;
             DUG 2 ;
             CAR ;
             PAIR ;
             SWAP ;
             CDR ;
             CAR ;
             CDR ;
             CAR ;
             SWAP ;
             DUP ;
             DUG 2 ;
             LAMBDA
               address
               (or (contract
                      (pair (list (pair (option address) (list (pair (option address) (pair nat nat))))) address))
                   string)
               { CONTRACT %tokens_sent
                   (pair (list %batch
                            (pair (option %from_ address)
                                  (list %txs (pair (option %to_ address) (pair (nat %token_id) (nat %amount))))))
                         (address %operator)) ;
                 IF_NONE
                   { PUSH string "FA2_SENDER_HOOK_UNDEFINED" ;
                     RIGHT
                       (contract
                          (pair (list %batch
                                   (pair (option %from_ address)
                                         (list %txs (pair (option %to_ address) (pair (nat %token_id) (nat %amount))))))
                                (address %operator))) }
                   { LEFT string } } ;
             LAMBDA
               (pair (option address) (list (pair (pair nat (option address)) nat)))
               (list (option address))
               { NIL (option address) ; SWAP ; CAR ; CONS } ;
             PAIR ;
             DIG 2 ;
             DUP ;
             DUG 3 ;
             CDR ;
             CDR ;
             DIG 2 ;
             DUP ;
             DUG 3 ;
             PAIR ;
             PAIR ;
             DIG 6 ;
             DUP ;
             DUG 7 ;
             SWAP ;
             EXEC ;
             LAMBDA
               address
               (or (contract
                      (pair (list (pair (option address) (list (pair (option address) (pair nat nat))))) address))
                   string)
               { CONTRACT %tokens_received
                   (pair (list %batch
                            (pair (option %from_ address)
                                  (list %txs (pair (option %to_ address) (pair (nat %token_id) (nat %amount))))))
                         (address %operator)) ;
                 IF_NONE
                   { PUSH string "FA2_RECEIVER_HOOK_UNDEFINED" ;
                     RIGHT
                       (contract
                          (pair (list %batch
                                   (pair (option %from_ address)
                                         (list %txs (pair (option %to_ address) (pair (nat %token_id) (nat %amount))))))
                                (address %operator))) }
                   { LEFT string } } ;
             LAMBDA
               (pair (option address) (list (pair (pair nat (option address)) nat)))
               (list (option address))
               { CDR ; MAP { CAR ; CDR } } ;
             PAIR ;
             DIG 3 ;
             CDR ;
             CAR ;
             DIG 3 ;
             PAIR ;
             PAIR ;
             DIG 5 ;
             SWAP ;
             EXEC ;
             ITER { CONS } ;
             DUP ;
             IF_CONS
               { SWAP ;
                 DROP 2 ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 DIG 2 ;
                 CAR ;
                 MAP { DUP ;
                       CDR ;
                       MAP { DUP ;
                             CAR ;
                             CAR ;
                             SWAP ;
                             DUP ;
                             DUG 2 ;
                             CDR ;
                             PAIR ;
                             SWAP ;
                             CAR ;
                             CDR ;
                             PAIR } ;
                       SWAP ;
                       CAR ;
                       PAIR } ;
                 PAIR ;
                 SWAP ;
                 MAP { PUSH mutez 0 ; DIG 2 ; DUP ; DUG 3 ; TRANSFER_TOKENS } ;
                 SWAP ;
                 DROP }
               { DROP 2 ; NIL operation } ;
             DUG 2 ;
             DIP { DUP ; CDR ; SWAP ; CAR ; DUP ; CDR ; SWAP ; CAR ; CDR } ;
             PAIR ;
             PAIR ;
             PAIR ;
             SWAP ;
             PAIR } ;
         SWAP ;
         APPLY ;
         LAMBDA
           (list (pair nat address))
           nat
           { PUSH nat 0 ;
             SWAP ;
             ITER { SWAP ; PAIR ; DUP ; CDR ; CAR ; SWAP ; CAR ; ADD } } ;
         LAMBDA
           (pair (pair address bool) (option address))
           unit
           { CAR ;
             CAR ;
             SENDER ;
             COMPARE ;
             NEQ ;
             IF { PUSH string "NOT_AN_ADMIN" ; FAILWITH } { UNIT } } ;
         DIG 7 ;
         DUP ;
         DUG 8 ;
         CDR ;
         DIG 8 ;
         CAR ;
         IF_LEFT
           { DIG 2 ;
             DROP ;
             DIG 2 ;
             DROP ;
             DIG 2 ;
             DROP ;
             DIG 2 ;
             DROP ;
             DIG 2 ;
             DROP ;
             DIG 2 ;
             DROP ;
             DIG 2 ;
             DROP ;
             PUSH mutez 0 ;
             DIG 2 ;
             DUP ;
             DUG 3 ;
             CDR ;
             CAR ;
             CDR ;
             CAR ;
             DUP ;
             CDR ;
             CDR ;
             IF_LEFT
               { IF_LEFT
                   { LEFT unit ; RIGHT unit }
                   { LEFT (or (unit %optional_owner_hook) (unit %required_owner_hook)) } }
               { RIGHT unit ; RIGHT unit } ;
             SWAP ;
             DUP ;
             DUG 2 ;
             CDR ;
             CAR ;
             IF_LEFT
               { IF_LEFT
                   { LEFT unit ; RIGHT unit }
                   { LEFT (or (unit %optional_owner_hook) (unit %required_owner_hook)) } }
               { RIGHT unit ; RIGHT unit } ;
             PAIR ;
             SWAP ;
             DUP ;
             DUG 2 ;
             CAR ;
             CDR ;
             IF_LEFT
               { IF_LEFT
                   { LEFT (or (unit %owner_transfer) (unit %owner_or_operator_transfer)) }
                   { RIGHT unit ; RIGHT unit } }
               { LEFT unit ; RIGHT unit } ;
             DIG 2 ;
             CAR ;
             CAR ;
             IF_NONE
               { NONE (pair string (option address)) }
               { DUP ; CAR ; SWAP ; CDR ; PAIR ; SOME } ;
             PAIR ;
             PAIR ;
             DUP ;
             CAR ;
             CAR ;
             SWAP ;
             DUP ;
             DUG 2 ;
             CDR ;
             CDR ;
             PAIR ;
             SWAP ;
             DUP ;
             DUG 2 ;
             CDR ;
             CAR ;
             PAIR ;
             SWAP ;
             CAR ;
             CDR ;
             PAIR ;
             TRANSFER_TOKENS ;
             SWAP ;
             NIL operation ;
             DIG 2 ;
             CONS ;
             PAIR }
           { IF_LEFT
               { DIG 3 ;
                 DROP ;
                 DIG 6 ;
                 DROP ;
                 IF_LEFT
                   { DIG 3 ;
                     DROP ;
                     DIG 3 ;
                     DROP ;
                     DIG 3 ;
                     DROP ;
                     DIG 3 ;
                     DROP ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     SWAP ;
                     IF_LEFT
                       { IF_LEFT
                           { DIG 3 ;
                             DROP 2 ;
                             DUP ;
                             CDR ;
                             IF_NONE
                               { DROP ; PUSH string "NO_PENDING_ADMIN" ; FAILWITH }
                               { SENDER ;
                                 COMPARE ;
                                 EQ ;
                                 IF { CAR ; NONE address ; SWAP ; CDR ; SENDER ; PAIR ; PAIR }
                                    { DROP ; PUSH string "NOT_A_PENDING_ADMIN" ; FAILWITH } } ;
                             NIL operation ;
                             PAIR }
                           { SWAP ;
                             DUP ;
                             DUG 2 ;
                             DIG 4 ;
                             SWAP ;
                             EXEC ;
                             DROP ;
                             DIP { DUP ; CDR ; SWAP ; CAR ; CAR } ;
                             SWAP ;
                             PAIR ;
                             PAIR ;
                             NIL operation ;
                             PAIR } }
                       { SWAP ;
                         DUP ;
                         DUG 2 ;
                         DIG 4 ;
                         SWAP ;
                         EXEC ;
                         DROP ;
                         SOME ;
                         SWAP ;
                         CAR ;
                         PAIR ;
                         NIL operation ;
                         PAIR } ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     SWAP ;
                     CDR ;
                     SWAP ;
                     PAIR ;
                     SWAP ;
                     CAR ;
                     PAIR }
                   { DIG 2 ;
                     DROP ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     CAR ;
                     CDR ;
                     IF { PUSH string "PAUSED" ; FAILWITH } { UNIT } ;
                     DROP ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     SWAP ;
                     IF_LEFT
                       { DIG 3 ;
                         DROP ;
                         DIG 4 ;
                         DROP ;
                         IF_LEFT
                           { DUP ;
                             CAR ;
                             SWAP ;
                             CDR ;
                             PAIR ;
                             DUP ;
                             CDR ;
                             MAP {} ;
                             SWAP ;
                             CAR ;
                             PAIR ;
                             SWAP ;
                             DUP ;
                             DUG 2 ;
                             CAR ;
                             CAR ;
                             CAR ;
                             SWAP ;
                             PAIR ;
                             DUP ;
                             CAR ;
                             DUP ;
                             CDR ;
                             MAP { PUSH nat 0 ;
                                   SWAP ;
                                   DUP ;
                                   DUG 2 ;
                                   CDR ;
                                   COMPARE ;
                                   NEQ ;
                                   IF { DROP ; DIG 5 ; DUP ; DUG 6 ; FAILWITH }
                                      { DIG 2 ;
                                        DUP ;
                                        DUG 3 ;
                                        CDR ;
                                        SWAP ;
                                        DUP ;
                                        DUG 2 ;
                                        CAR ;
                                        PAIR ;
                                        DIG 6 ;
                                        DUP ;
                                        DUG 7 ;
                                        SWAP ;
                                        EXEC ;
                                        PAIR ;
                                        DUP ;
                                        CDR ;
                                        CDR ;
                                        SWAP ;
                                        DUP ;
                                        DUG 2 ;
                                        CDR ;
                                        CAR ;
                                        PAIR ;
                                        SWAP ;
                                        CAR ;
                                        SWAP ;
                                        PAIR } } ;
                             DIG 2 ;
                             DROP ;
                             DIG 4 ;
                             DROP ;
                             DIG 4 ;
                             DROP ;
                             SWAP ;
                             CAR ;
                             PUSH mutez 0 ;
                             DIG 2 ;
                             TRANSFER_TOKENS ;
                             SWAP ;
                             NIL operation ;
                             DIG 2 ;
                             CONS ;
                             PAIR }
                           { DIG 3 ;
                             DROP ;
                             DIG 3 ;
                             DROP ;
                             PUSH mutez 0 ;
                             SELF ;
                             ADDRESS ;
                             TRANSFER_TOKENS ;
                             SWAP ;
                             NIL operation ;
                             DIG 2 ;
                             CONS ;
                             PAIR } }
                       { DIG 4 ;
                         DROP ;
                         DIG 5 ;
                         DROP ;
                         IF_LEFT
                           { DIG 4 ;
                             DROP ;
                             MAP { DUP ;
                                   CDR ;
                                   MAP { DUP ;
                                         CDR ;
                                         CAR ;
                                         SWAP ;
                                         DUP ;
                                         DUG 2 ;
                                         CAR ;
                                         DIG 2 ;
                                         CDR ;
                                         CDR ;
                                         PAIR ;
                                         PAIR } ;
                                   SWAP ;
                                   CAR ;
                                   PAIR } ;
                             MAP { DUP ;
                                   CDR ;
                                   MAP { DUP ;
                                         CDR ;
                                         SWAP ;
                                         DUP ;
                                         DUG 2 ;
                                         CAR ;
                                         CDR ;
                                         SOME ;
                                         DIG 2 ;
                                         CAR ;
                                         CAR ;
                                         PAIR ;
                                         PAIR } ;
                                   SWAP ;
                                   CAR ;
                                   SOME ;
                                   PAIR } ;
                             SWAP ;
                             LAMBDA
                               (pair (pair address address) (pair nat (big_map (pair address (pair address nat)) unit)))
                               unit
                               { DUP ;
                                 CAR ;
                                 CAR ;
                                 SWAP ;
                                 DUP ;
                                 DUG 2 ;
                                 CAR ;
                                 CDR ;
                                 DUP ;
                                 DIG 2 ;
                                 DUP ;
                                 DUG 3 ;
                                 COMPARE ;
                                 EQ ;
                                 IF { DROP 3 ; UNIT }
                                    { DIG 2 ;
                                      DUP ;
                                      DUG 3 ;
                                      CDR ;
                                      CDR ;
                                      DIG 3 ;
                                      CDR ;
                                      CAR ;
                                      DIG 2 ;
                                      PAIR ;
                                      DIG 2 ;
                                      PAIR ;
                                      MEM ;
                                      IF { UNIT } { PUSH string "FA2_NOT_OPERATOR" ; FAILWITH } } } ;
                             DIG 2 ;
                             PAIR ;
                             PAIR ;
                             DIG 2 ;
                             SWAP ;
                             EXEC }
                           { DIG 3 ;
                             DROP ;
                             SWAP ;
                             DUP ;
                             DUG 2 ;
                             CAR ;
                             CAR ;
                             CDR ;
                             SWAP ;
                             PAIR ;
                             DUP ;
                             CAR ;
                             MAP { IF_LEFT
                                     { LEFT (pair (address %owner) (pair (address %operator) (nat %token_id))) }
                                     { RIGHT (pair (address %owner) (pair (address %operator) (nat %token_id))) } ;
                                   IF_LEFT
                                     { DIG 4 ;
                                       DUP ;
                                       DUG 5 ;
                                       SWAP ;
                                       EXEC ;
                                       LEFT (pair (pair (address %operator) (address %owner)) (nat %token_id)) }
                                     { DIG 4 ;
                                       DUP ;
                                       DUG 5 ;
                                       SWAP ;
                                       EXEC ;
                                       RIGHT (pair (pair (address %operator) (address %owner)) (nat %token_id)) } } ;
                             DIG 4 ;
                             DROP ;
                             SENDER ;
                             DIG 2 ;
                             CDR ;
                             DIG 2 ;
                             ITER { SWAP ;
                                    PAIR ;
                                    DUP ;
                                    CDR ;
                                    DIG 2 ;
                                    DUP ;
                                    DUG 3 ;
                                    SWAP ;
                                    DUP ;
                                    DUG 2 ;
                                    IF_LEFT {} {} ;
                                    CAR ;
                                    CDR ;
                                    COMPARE ;
                                    EQ ;
                                    IF { UNIT } { PUSH string "FA2_NOT_OWNER" ; FAILWITH } ;
                                    DROP ;
                                    SWAP ;
                                    CAR ;
                                    SWAP ;
                                    IF_LEFT
                                      { SWAP ;
                                        UNIT ;
                                        SOME ;
                                        DIG 2 ;
                                        DUP ;
                                        DUG 3 ;
                                        CDR ;
                                        DIG 3 ;
                                        DUP ;
                                        DUG 4 ;
                                        CAR ;
                                        CAR ;
                                        PAIR ;
                                        DIG 3 ;
                                        CAR ;
                                        CDR ;
                                        PAIR ;
                                        UPDATE }
                                      { DUP ;
                                        DUG 2 ;
                                        CDR ;
                                        DIG 2 ;
                                        DUP ;
                                        DUG 3 ;
                                        CAR ;
                                        CAR ;
                                        PAIR ;
                                        DIG 2 ;
                                        CAR ;
                                        CDR ;
                                        PAIR ;
                                        NONE unit ;
                                        SWAP ;
                                        UPDATE } } ;
                             SWAP ;
                             DROP ;
                             DIP { DUP ; CDR ; SWAP ; CAR ; DUP ; CDR ; SWAP ; CAR ; CAR } ;
                             SWAP ;
                             PAIR ;
                             PAIR ;
                             PAIR ;
                             NIL operation ;
                             PAIR } } ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     SWAP ;
                     CAR ;
                     PAIR ;
                     SWAP ;
                     CAR ;
                     PAIR } }
               { DIG 5 ;
                 DROP ;
                 DIG 5 ;
                 DROP ;
                 DIG 6 ;
                 DROP ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 DIG 3 ;
                 SWAP ;
                 EXEC ;
                 DROP ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 SWAP ;
                 IF_LEFT
                   { DUP ;
                     MAP { NIL (pair (pair nat (option address)) nat) ;
                           PUSH nat 0 ;
                           NONE address ;
                           DIG 3 ;
                           DUP ;
                           DUG 4 ;
                           CAR ;
                           PAIR ;
                           PAIR ;
                           CONS ;
                           SWAP ;
                           CDR ;
                           SOME ;
                           PAIR } ;
                     DIG 2 ;
                     DUP ;
                     DUG 3 ;
                     LAMBDA
                       (pair (pair address address) (pair nat (big_map (pair address (pair address nat)) unit)))
                       unit
                       { DROP ; UNIT } ;
                     DIG 2 ;
                     PAIR ;
                     PAIR ;
                     DIG 5 ;
                     SWAP ;
                     EXEC ;
                     SWAP ;
                     DIG 4 ;
                     SWAP ;
                     EXEC ;
                     DIG 2 ;
                     CDR ;
                     SUB ;
                     ISNAT ;
                     IF_NONE { DIG 2 ; FAILWITH } { DIG 3 ; DROP } ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     CAR ;
                     PAIR ;
                     SWAP ;
                     CAR ;
                     PAIR }
                   { DIG 5 ;
                     DROP ;
                     DUP ;
                     MAP { PUSH nat 0 ; SWAP ; DUP ; DUG 2 ; CDR ; SOME ; DIG 2 ; CAR ; PAIR ; PAIR } ;
                     NIL (pair (option address) (list (pair (pair nat (option address)) nat))) ;
                     SWAP ;
                     NONE address ;
                     PAIR ;
                     CONS ;
                     DIG 2 ;
                     DUP ;
                     DUG 3 ;
                     LAMBDA
                       (pair (pair address address) (pair nat (big_map (pair address (pair address nat)) unit)))
                       unit
                       { DROP ; UNIT } ;
                     DIG 2 ;
                     PAIR ;
                     PAIR ;
                     DIG 5 ;
                     SWAP ;
                     EXEC ;
                     SWAP ;
                     DIG 4 ;
                     SWAP ;
                     EXEC ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     SWAP ;
                     DIG 3 ;
                     CDR ;
                     ADD ;
                     SWAP ;
                     CAR ;
                     PAIR ;
                     SWAP ;
                     CAR ;
                     PAIR } ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 SWAP ;
                 CAR ;
                 PAIR ;
                 SWAP ;
                 CAR ;
                 PAIR } } } }

