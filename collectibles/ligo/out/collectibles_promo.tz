{ parameter
    (or (or (unit %disburse_collectibles) (unit %refund_money))
        (or (unit %stop_promotion)
            (pair %tokens_received
               (list %batch
                  (pair (option %from_ address)
                        (list %txs (pair (option %to_ address) (pair (nat %token_id) (nat %amount))))))
               (address %operator)))) ;
  storage
    (or (or (pair %finished
               (pair (map %allocated_collectibles address (list nat))
                     (pair %def
                        (pair (address %collectible_fa2) (pair %money_token (address %fa2) (nat %id)))
                        (pair (nat %price) (address %promoter))))
               (map %money_deposits address nat))
            (pair %in_progress
               (pair (map %allocated_collectibles address (list nat)) (list %collectibles nat))
               (pair (pair %def
                        (pair (address %collectible_fa2) (pair %money_token (address %fa2) (nat %id)))
                        (pair (nat %price) (address %promoter)))
                     (map %money_deposits address nat))))
        (pair %initial
           (pair (address %collectible_fa2) (pair %money_token (address %fa2) (nat %id)))
           (pair (nat %price) (address %promoter)))) ;
  code { LAMBDA
           (pair (list (pair (option address) (list (pair (option address) (pair nat nat))))) address)
           (pair (list (pair (option address) (list (pair (pair nat (option address)) nat)))) address)
           { DUP ;
             CAR ;
             MAP { DUP ;
                   CDR ;
                   MAP { DUP ;
                         CDR ;
                         CAR ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         CAR ;
                         DIG 2 ;
                         CDR ;
                         CDR ;
                         PAIR ;
                         PAIR } ;
                   SWAP ;
                   CAR ;
                   PAIR } ;
             SWAP ;
             CDR ;
             SWAP ;
             PAIR } ;
         LAMBDA
           (pair address (list (pair (pair nat address) nat)))
           (pair address (list (pair address (pair nat nat))))
           { DUP ;
             CDR ;
             MAP { DUP ;
                   CAR ;
                   CAR ;
                   SWAP ;
                   DUP ;
                   DUG 2 ;
                   CDR ;
                   PAIR ;
                   SWAP ;
                   CAR ;
                   CDR ;
                   PAIR } ;
             SWAP ;
             CAR ;
             PAIR } ;
         LAMBDA
           (pair (list (pair (pair nat (option address)) nat)) address)
           unit
           { DUP ;
             CAR ;
             ITER { PUSH nat 0 ;
                    SWAP ;
                    DUP ;
                    DUG 2 ;
                    CAR ;
                    CAR ;
                    COMPARE ;
                    EQ ;
                    IF { DROP ; UNIT }
                       { CAR ;
                         CDR ;
                         IF_NONE
                           { UNIT }
                           { SWAP ;
                             DUP ;
                             DUG 2 ;
                             CDR ;
                             SWAP ;
                             COMPARE ;
                             EQ ;
                             IF { PUSH string "CANNOT_ACCEPT_TOKENS" ; FAILWITH } { UNIT } } } ;
                    DROP } ;
             DROP ;
             PUSH unit Unit } ;
         SWAP ;
         DUP ;
         DUG 2 ;
         LAMBDA
           (pair (lambda
                    (pair address (list (pair (pair nat address) nat)))
                    (pair address (list (pair address (pair nat nat)))))
                 (pair (pair (map address (list nat)) address) (pair address address)))
           (pair (list operation) (map address (list nat)))
           { DUP ;
             CDR ;
             SWAP ;
             CAR ;
             SWAP ;
             DUP ;
             CAR ;
             CAR ;
             SWAP ;
             DUP ;
             DUG 2 ;
             CDR ;
             CAR ;
             SWAP ;
             DUP ;
             DUG 2 ;
             SWAP ;
             DUP ;
             DUG 2 ;
             GET ;
             IF_NONE
               { DROP ; SWAP ; DROP ; SWAP ; DROP ; NIL operation ; PAIR }
               { MAP { SWAP ; DUP ; DUG 2 ; PUSH nat 1 ; PAIR ; PAIR } ;
                 DIG 3 ;
                 DUP ;
                 DUG 4 ;
                 CDR ;
                 CDR ;
                 PAIR ;
                 DIG 4 ;
                 SWAP ;
                 EXEC ;
                 DIG 3 ;
                 CAR ;
                 CDR ;
                 CONTRACT %transfer
                   (list (pair (address %from_)
                               (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))) ;
                 IF_NONE
                   { DROP ; PUSH string "CANNOT_INVOKE_COLLECTIBLE_FA2" ; FAILWITH }
                   { PUSH mutez 0 ;
                     NIL (pair address (list (pair address (pair nat nat)))) ;
                     DIG 3 ;
                     CONS ;
                     TRANSFER_TOKENS } ;
                 DUG 2 ;
                 NONE (list nat) ;
                 SWAP ;
                 UPDATE ;
                 NIL operation ;
                 DIG 2 ;
                 CONS ;
                 PAIR } } ;
         SWAP ;
         APPLY ;
         DIG 2 ;
         LAMBDA
           (pair (lambda
                    (pair address (list (pair (pair nat address) nat)))
                    (pair address (list (pair address (pair nat nat)))))
                 (pair (pair (map address nat) (pair address nat)) (pair address address)))
           (pair (list operation) (map address nat))
           { DUP ;
             CDR ;
             SWAP ;
             CAR ;
             SWAP ;
             DUP ;
             CAR ;
             CAR ;
             SWAP ;
             DUP ;
             DUG 2 ;
             CAR ;
             CDR ;
             DIG 2 ;
             DUP ;
             DUG 3 ;
             CDR ;
             CAR ;
             DIG 2 ;
             DUP ;
             DUG 3 ;
             SWAP ;
             DUP ;
             DUG 2 ;
             GET ;
             IF_NONE
               { DROP 2 ; SWAP ; DROP ; SWAP ; DROP ; NIL operation ; PAIR }
               { NIL (pair (pair nat address) nat) ;
                 DIG 3 ;
                 DUP ;
                 DUG 4 ;
                 CDR ;
                 DIG 3 ;
                 DUP ;
                 DUG 4 ;
                 DIG 3 ;
                 PAIR ;
                 PAIR ;
                 CONS ;
                 DIG 4 ;
                 CDR ;
                 CDR ;
                 PAIR ;
                 DIG 4 ;
                 SWAP ;
                 EXEC ;
                 DIG 2 ;
                 CAR ;
                 CONTRACT %transfer
                   (list (pair (address %from_)
                               (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))) ;
                 IF_NONE
                   { DROP ; PUSH string "CANNOT_INVOKE_MONEY_FA2" ; FAILWITH }
                   { PUSH mutez 0 ;
                     NIL (pair address (list (pair address (pair nat nat)))) ;
                     DIG 3 ;
                     CONS ;
                     TRANSFER_TOKENS } ;
                 DUG 2 ;
                 NONE nat ;
                 SWAP ;
                 UPDATE ;
                 NIL operation ;
                 DIG 2 ;
                 CONS ;
                 PAIR } } ;
         SWAP ;
         APPLY ;
         LAMBDA
           (pair address address)
           unit
           { DUP ;
             CDR ;
             SWAP ;
             CAR ;
             COMPARE ;
             EQ ;
             IF { UNIT } { PUSH string "NOT_PROMOTER" ; FAILWITH } } ;
         DIG 5 ;
         DUP ;
         DUG 6 ;
         CDR ;
         DIG 6 ;
         CAR ;
         IF_LEFT
           { DIG 2 ;
             DROP ;
             DIG 4 ;
             DROP ;
             DIG 4 ;
             DROP ;
             IF_LEFT
               { DIG 2 ;
                 DROP 2 ;
                 IF_LEFT
                   { IF_LEFT
                       { SELF ;
                         ADDRESS ;
                         SENDER ;
                         PAIR ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         CAR ;
                         CDR ;
                         CAR ;
                         CAR ;
                         DIG 2 ;
                         DUP ;
                         DUG 3 ;
                         CAR ;
                         CAR ;
                         PAIR ;
                         PAIR ;
                         DIG 2 ;
                         SWAP ;
                         EXEC ;
                         DUP ;
                         DUG 2 ;
                         CDR ;
                         DIP { DUP ; CDR ; SWAP ; CAR ; CDR } ;
                         PAIR ;
                         PAIR ;
                         LEFT (pair (pair (map %allocated_collectibles address (list nat)) (list %collectibles nat))
                                    (pair (pair %def
                                             (pair (address %collectible_fa2) (pair %money_token (address %fa2) (nat %id)))
                                             (pair (nat %price) (address %promoter)))
                                          (map %money_deposits address nat))) ;
                         LEFT (pair (pair (address %collectible_fa2) (pair %money_token (address %fa2) (nat %id)))
                                    (pair (nat %price) (address %promoter))) ;
                         SWAP ;
                         CAR ;
                         PAIR }
                       { SELF ;
                         ADDRESS ;
                         SENDER ;
                         PAIR ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         CDR ;
                         CAR ;
                         CAR ;
                         CAR ;
                         DIG 2 ;
                         DUP ;
                         DUG 3 ;
                         CAR ;
                         CAR ;
                         PAIR ;
                         PAIR ;
                         DIG 2 ;
                         SWAP ;
                         EXEC ;
                         DUP ;
                         DUG 2 ;
                         CDR ;
                         DIP { DUP ; CDR ; SWAP ; CAR ; CDR } ;
                         PAIR ;
                         PAIR ;
                         RIGHT
                           (pair (pair (map %allocated_collectibles address (list nat))
                                       (pair %def
                                          (pair (address %collectible_fa2) (pair %money_token (address %fa2) (nat %id)))
                                          (pair (nat %price) (address %promoter))))
                                 (map %money_deposits address nat)) ;
                         LEFT (pair (pair (address %collectible_fa2) (pair %money_token (address %fa2) (nat %id)))
                                    (pair (nat %price) (address %promoter))) ;
                         SWAP ;
                         CAR ;
                         PAIR } }
                   { SWAP ; DROP 2 ; PUSH string "PROMO_NOT_STARTED" ; FAILWITH } }
               { DIG 3 ;
                 DROP 2 ;
                 IF_LEFT
                   { IF_LEFT
                       { SELF ;
                         ADDRESS ;
                         SENDER ;
                         PAIR ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         CAR ;
                         CDR ;
                         CAR ;
                         CDR ;
                         DIG 2 ;
                         DUP ;
                         DUG 3 ;
                         CDR ;
                         PAIR ;
                         PAIR ;
                         DIG 2 ;
                         SWAP ;
                         EXEC ;
                         DUP ;
                         DUG 2 ;
                         CDR ;
                         SWAP ;
                         CAR ;
                         PAIR ;
                         LEFT (pair (pair (map %allocated_collectibles address (list nat)) (list %collectibles nat))
                                    (pair (pair %def
                                             (pair (address %collectible_fa2) (pair %money_token (address %fa2) (nat %id)))
                                             (pair (nat %price) (address %promoter)))
                                          (map %money_deposits address nat))) ;
                         LEFT (pair (pair (address %collectible_fa2) (pair %money_token (address %fa2) (nat %id)))
                                    (pair (nat %price) (address %promoter))) ;
                         SWAP ;
                         CAR ;
                         PAIR }
                       { SELF ;
                         ADDRESS ;
                         SENDER ;
                         PAIR ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         CDR ;
                         CAR ;
                         CAR ;
                         CDR ;
                         DIG 2 ;
                         DUP ;
                         DUG 3 ;
                         CDR ;
                         CDR ;
                         PAIR ;
                         PAIR ;
                         DIG 2 ;
                         SWAP ;
                         EXEC ;
                         DUP ;
                         DUG 2 ;
                         CDR ;
                         DIP { DUP ; CAR ; SWAP ; CDR ; CAR } ;
                         SWAP ;
                         PAIR ;
                         SWAP ;
                         PAIR ;
                         RIGHT
                           (pair (pair (map %allocated_collectibles address (list nat))
                                       (pair %def
                                          (pair (address %collectible_fa2) (pair %money_token (address %fa2) (nat %id)))
                                          (pair (nat %price) (address %promoter))))
                                 (map %money_deposits address nat)) ;
                         LEFT (pair (pair (address %collectible_fa2) (pair %money_token (address %fa2) (nat %id)))
                                    (pair (nat %price) (address %promoter))) ;
                         SWAP ;
                         CAR ;
                         PAIR } }
                   { SWAP ; DROP 2 ; PUSH string "PROMO_NOT_STARTED" ; FAILWITH } } }
           { DIG 3 ;
             DROP ;
             DIG 3 ;
             DROP ;
             IF_LEFT
               { DIG 3 ;
                 DROP ;
                 DIG 3 ;
                 DROP 2 ;
                 IF_LEFT
                   { IF_LEFT
                       { SWAP ; DROP 2 ; PUSH string "PROMO_FINISHED" ; FAILWITH }
                       { SENDER ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         CDR ;
                         CAR ;
                         CDR ;
                         CDR ;
                         PAIR ;
                         DIG 2 ;
                         SWAP ;
                         EXEC ;
                         DROP ;
                         DUP ;
                         CAR ;
                         CAR ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         CDR ;
                         CAR ;
                         CDR ;
                         CDR ;
                         GET ;
                         IF_NONE
                           { DUP ; CAR ; CDR }
                           { SWAP ; DUP ; DUG 2 ; CAR ; CDR ; ITER { CONS } } ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         CDR ;
                         CDR ;
                         DIG 2 ;
                         DUP ;
                         DUG 3 ;
                         CDR ;
                         CAR ;
                         DIG 3 ;
                         DUP ;
                         DUG 4 ;
                         CAR ;
                         CAR ;
                         DIG 3 ;
                         SOME ;
                         DIG 4 ;
                         CDR ;
                         CAR ;
                         CDR ;
                         CDR ;
                         UPDATE ;
                         PAIR ;
                         PAIR ;
                         LEFT (pair (pair (map %allocated_collectibles address (list nat)) (list %collectibles nat))
                                    (pair (pair %def
                                             (pair (address %collectible_fa2) (pair %money_token (address %fa2) (nat %id)))
                                             (pair (nat %price) (address %promoter)))
                                          (map %money_deposits address nat))) ;
                         LEFT (pair (pair (address %collectible_fa2) (pair %money_token (address %fa2) (nat %id)))
                                    (pair (nat %price) (address %promoter))) } }
                   { SENDER ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     CDR ;
                     PAIR ;
                     DIG 2 ;
                     SWAP ;
                     EXEC ;
                     DROP ;
                     EMPTY_MAP address nat ;
                     SWAP ;
                     EMPTY_MAP address (list nat) ;
                     PAIR ;
                     PAIR ;
                     LEFT (pair (pair (map %allocated_collectibles address (list nat)) (list %collectibles nat))
                                (pair (pair %def
                                         (pair (address %collectible_fa2) (pair %money_token (address %fa2) (nat %id)))
                                         (pair (nat %price) (address %promoter)))
                                      (map %money_deposits address nat))) ;
                     LEFT (pair (pair (address %collectible_fa2) (pair %money_token (address %fa2) (nat %id)))
                                (pair (nat %price) (address %promoter))) } ;
                 NIL operation ;
                 PAIR }
               { DIG 2 ;
                 DROP ;
                 SWAP ;
                 IF_LEFT
                   { IF_LEFT
                       { SWAP ;
                         DROP ;
                         SWAP ;
                         DROP ;
                         SWAP ;
                         DROP 2 ;
                         PUSH string "PROMO_FINISHED" ;
                         FAILWITH }
                       { SWAP ;
                         PAIR ;
                         DUP ;
                         CDR ;
                         DUP ;
                         CDR ;
                         CAR ;
                         CAR ;
                         CDR ;
                         CAR ;
                         SENDER ;
                         COMPARE ;
                         NEQ ;
                         IF { DROP 4 ; PUSH string "PROMO_MONEY_TOKENS_EXPECTED" ; FAILWITH }
                            { SWAP ;
                              CAR ;
                              DIG 3 ;
                              SWAP ;
                              EXEC ;
                              CAR ;
                              ITER { DUP ;
                                     CAR ;
                                     IF_NONE
                                       { SELF ;
                                         ADDRESS ;
                                         SWAP ;
                                         CDR ;
                                         PAIR ;
                                         DIG 2 ;
                                         DUP ;
                                         DUG 3 ;
                                         SWAP ;
                                         EXEC ;
                                         DROP }
                                       { DIG 2 ;
                                         SWAP ;
                                         DIG 2 ;
                                         CDR ;
                                         PAIR ;
                                         PAIR ;
                                         DUP ;
                                         CDR ;
                                         SWAP ;
                                         DUP ;
                                         DUG 2 ;
                                         CAR ;
                                         CAR ;
                                         ITER { DUP ;
                                                CAR ;
                                                CDR ;
                                                IF_NONE
                                                  { DROP }
                                                  { SELF ;
                                                    ADDRESS ;
                                                    SWAP ;
                                                    COMPARE ;
                                                    NEQ ;
                                                    IF { DROP }
                                                       { SWAP ;
                                                         DUP ;
                                                         DUG 2 ;
                                                         CDR ;
                                                         CAR ;
                                                         CAR ;
                                                         CDR ;
                                                         CDR ;
                                                         SWAP ;
                                                         DUP ;
                                                         DUG 2 ;
                                                         CDR ;
                                                         COMPARE ;
                                                         NEQ ;
                                                         IF { DROP 2 ; PUSH string "PROMO_MONEY_TOKENS_EXPECTED" ; FAILWITH }
                                                            { CAR ;
                                                              CAR ;
                                                              DIG 2 ;
                                                              DUP ;
                                                              DUG 3 ;
                                                              CAR ;
                                                              CDR ;
                                                              PAIR ;
                                                              PAIR ;
                                                              DUP ;
                                                              CAR ;
                                                              CAR ;
                                                              SWAP ;
                                                              DUP ;
                                                              DUG 2 ;
                                                              CAR ;
                                                              CDR ;
                                                              DIG 2 ;
                                                              CDR ;
                                                              DUP ;
                                                              CDR ;
                                                              CDR ;
                                                              DIG 3 ;
                                                              DUP ;
                                                              DUG 4 ;
                                                              GET ;
                                                              IF_NONE { SWAP ; DUP ; DUG 2 } { DIG 2 ; DUP ; DUG 3 ; ADD } ;
                                                              DROP ;
                                                              DIG 2 ;
                                                              DUP ;
                                                              DUG 3 ;
                                                              DIG 2 ;
                                                              PAIR ;
                                                              PAIR ;
                                                              LEFT (pair nat
                                                                         (pair (pair (map %allocated_collectibles address (list nat)) (list %collectibles nat))
                                                                               (pair (pair %def
                                                                                        (pair (address %collectible_fa2) (pair %money_token (address %fa2) (nat %id)))
                                                                                        (pair (nat %price) (address %promoter)))
                                                                                     (map %money_deposits address nat)))) ;
                                                              LOOP_LEFT
                                                                { DUP ;
                                                                  CAR ;
                                                                  CAR ;
                                                                  SWAP ;
                                                                  DUP ;
                                                                  DUG 2 ;
                                                                  CAR ;
                                                                  CDR ;
                                                                  DIG 2 ;
                                                                  CDR ;
                                                                  DUP ;
                                                                  CAR ;
                                                                  CDR ;
                                                                  IF_CONS
                                                                    { SWAP ;
                                                                      DIG 2 ;
                                                                      DUP ;
                                                                      DUG 3 ;
                                                                      CDR ;
                                                                      CAR ;
                                                                      CDR ;
                                                                      CAR ;
                                                                      DIG 5 ;
                                                                      DUP ;
                                                                      DUG 6 ;
                                                                      SUB ;
                                                                      ISNAT ;
                                                                      IF_NONE
                                                                        { DROP 2 ;
                                                                          SWAP ;
                                                                          DROP ;
                                                                          SWAP ;
                                                                          PAIR ;
                                                                          RIGHT
                                                                            (pair (pair nat address)
                                                                                  (pair (pair (map %allocated_collectibles address (list nat)) (list %collectibles nat))
                                                                                        (pair (pair %def
                                                                                                 (pair (address %collectible_fa2) (pair %money_token (address %fa2) (nat %id)))
                                                                                                 (pair (nat %price) (address %promoter)))
                                                                                              (map %money_deposits address nat)))) }
                                                                        { DIG 5 ;
                                                                          DROP ;
                                                                          DIG 3 ;
                                                                          DUP ;
                                                                          DUG 4 ;
                                                                          CAR ;
                                                                          CAR ;
                                                                          DIG 5 ;
                                                                          DUP ;
                                                                          DUG 6 ;
                                                                          GET ;
                                                                          IF_NONE { NIL nat ; DIG 3 ; CONS } { DIG 3 ; CONS } ;
                                                                          DIG 3 ;
                                                                          DUP ;
                                                                          CAR ;
                                                                          CAR ;
                                                                          DIG 2 ;
                                                                          SOME ;
                                                                          DIG 5 ;
                                                                          DUP ;
                                                                          DUG 6 ;
                                                                          UPDATE ;
                                                                          DIP { DUP ; CDR ; SWAP ; CAR ; CDR } ;
                                                                          PAIR ;
                                                                          PAIR ;
                                                                          DIG 2 ;
                                                                          DIP { DUP ; CDR ; SWAP ; CAR ; CAR } ;
                                                                          SWAP ;
                                                                          PAIR ;
                                                                          PAIR ;
                                                                          DUG 2 ;
                                                                          PAIR ;
                                                                          PAIR ;
                                                                          LEFT (pair nat
                                                                                     (pair (pair (map %allocated_collectibles address (list nat)) (list %collectibles nat))
                                                                                           (pair (pair %def
                                                                                                    (pair (address %collectible_fa2) (pair %money_token (address %fa2) (nat %id)))
                                                                                                    (pair (nat %price) (address %promoter)))
                                                                                                 (map %money_deposits address nat)))) } }
                                                                    { SWAP ;
                                                                      DROP ;
                                                                      SWAP ;
                                                                      PAIR ;
                                                                      RIGHT
                                                                        (pair (pair nat address)
                                                                              (pair (pair (map %allocated_collectibles address (list nat)) (list %collectibles nat))
                                                                                    (pair (pair %def
                                                                                             (pair (address %collectible_fa2) (pair %money_token (address %fa2) (nat %id)))
                                                                                             (pair (nat %price) (address %promoter)))
                                                                                          (map %money_deposits address nat)))) } } ;
                                                              DUP ;
                                                              CDR ;
                                                              DUP ;
                                                              CDR ;
                                                              CDR ;
                                                              DIG 2 ;
                                                              CAR ;
                                                              SOME ;
                                                              DIG 3 ;
                                                              UPDATE ;
                                                              DIP { DUP ; CAR ; SWAP ; CDR ; CAR } ;
                                                              SWAP ;
                                                              PAIR ;
                                                              SWAP ;
                                                              PAIR } } } } ;
                                         SWAP ;
                                         DROP } } ;
                              SWAP ;
                              DROP ;
                              PUSH nat 0 ;
                              SWAP ;
                              DUP ;
                              DUG 2 ;
                              CAR ;
                              CDR ;
                              SIZE ;
                              COMPARE ;
                              EQ ;
                              IF { DUP ;
                                   CDR ;
                                   CDR ;
                                   SWAP ;
                                   DUP ;
                                   DUG 2 ;
                                   CDR ;
                                   CAR ;
                                   DIG 2 ;
                                   CAR ;
                                   CAR ;
                                   PAIR ;
                                   PAIR ;
                                   LEFT (pair (pair (map %allocated_collectibles address (list nat)) (list %collectibles nat))
                                              (pair (pair %def
                                                       (pair (address %collectible_fa2) (pair %money_token (address %fa2) (nat %id)))
                                                       (pair (nat %price) (address %promoter)))
                                                    (map %money_deposits address nat))) ;
                                   LEFT (pair (pair (address %collectible_fa2) (pair %money_token (address %fa2) (nat %id)))
                                              (pair (nat %price) (address %promoter))) }
                                 { RIGHT
                                     (pair (pair (map %allocated_collectibles address (list nat))
                                                 (pair %def
                                                    (pair (address %collectible_fa2) (pair %money_token (address %fa2) (nat %id)))
                                                    (pair (nat %price) (address %promoter))))
                                           (map %money_deposits address nat)) ;
                                   LEFT (pair (pair (address %collectible_fa2) (pair %money_token (address %fa2) (nat %id)))
                                              (pair (nat %price) (address %promoter))) } } } }
                   { SWAP ;
                     PAIR ;
                     DUP ;
                     CDR ;
                     DUP ;
                     CAR ;
                     CAR ;
                     SENDER ;
                     COMPARE ;
                     NEQ ;
                     IF { DROP 4 ; PUSH string "PROMO_COLLECTIBLES_EXPECTED" ; FAILWITH }
                        { SWAP ;
                          CAR ;
                          DIG 3 ;
                          SWAP ;
                          EXEC ;
                          NIL nat ;
                          SWAP ;
                          CAR ;
                          ITER { DUP ;
                                 CAR ;
                                 IF_NONE
                                   { PUSH bool False }
                                   { DIG 3 ;
                                     DUP ;
                                     DUG 4 ;
                                     CDR ;
                                     CDR ;
                                     SWAP ;
                                     COMPARE ;
                                     EQ ;
                                     IF { PUSH bool True } { PUSH bool False } } ;
                                 IF { NIL nat ;
                                      SWAP ;
                                      CDR ;
                                      ITER { PUSH nat 0 ;
                                             SWAP ;
                                             DUP ;
                                             DUG 2 ;
                                             CAR ;
                                             CAR ;
                                             COMPARE ;
                                             EQ ;
                                             IF { DROP }
                                                { PUSH nat 1 ;
                                                  SWAP ;
                                                  DUP ;
                                                  DUG 2 ;
                                                  CAR ;
                                                  CAR ;
                                                  COMPARE ;
                                                  GT ;
                                                  IF { DROP 2 ; PUSH string "NON_NFT_RECEIVED" ; FAILWITH }
                                                     { DUP ;
                                                       CAR ;
                                                       CDR ;
                                                       IF_NONE
                                                         { DROP }
                                                         { SELF ; ADDRESS ; SWAP ; COMPARE ; EQ ; IF { CDR ; CONS } { DROP } } } } } ;
                                      ITER { CONS } }
                                    { SELF ;
                                      ADDRESS ;
                                      SWAP ;
                                      CDR ;
                                      PAIR ;
                                      DIG 3 ;
                                      DUP ;
                                      DUG 4 ;
                                      SWAP ;
                                      EXEC ;
                                      DROP } } ;
                          DIG 2 ;
                          DROP ;
                          EMPTY_MAP address nat ;
                          DIG 2 ;
                          PAIR ;
                          SWAP ;
                          EMPTY_MAP address (list nat) ;
                          PAIR ;
                          PAIR ;
                          RIGHT
                            (pair (pair (map %allocated_collectibles address (list nat))
                                        (pair %def
                                           (pair (address %collectible_fa2) (pair %money_token (address %fa2) (nat %id)))
                                           (pair (nat %price) (address %promoter))))
                                  (map %money_deposits address nat)) ;
                          LEFT (pair (pair (address %collectible_fa2) (pair %money_token (address %fa2) (nat %id)))
                                     (pair (nat %price) (address %promoter))) } } ;
                 NIL operation ;
                 PAIR } } } }

