{ parameter
    (or (unit %stop_promotion)
        (or (unit %disburse_collectibles)
            (or (unit %refund_money)
                (pair %tokens_received
                   (list %batch
                      (pair (option %from_ address)
                            (list %txs (pair (option %to_ address) (nat %token_id) (nat %amount)))))
                   (address %operator))))) ;
  storage
    (or (pair %initial
           (address %promoter)
           (pair %money_token (address %fa2) (nat %id))
           (address %collectible_fa2)
           (nat %price))
        (or (pair %in_progress
               (pair %def
                  (address %promoter)
                  (pair %money_token (address %fa2) (nat %id))
                  (address %collectible_fa2)
                  (nat %price))
               (list %collectibles nat)
               (map %money_deposits address nat)
               (map %allocated_collectibles address (list nat)))
            (pair %finished
               (pair %def
                  (address %promoter)
                  (pair %money_token (address %fa2) (nat %id))
                  (address %collectible_fa2)
                  (nat %price))
               (map %money_deposits address nat)
               (map %allocated_collectibles address (list nat))))) ;
  code { LAMBDA
           (pair (list (pair (option address) nat nat)) address)
           unit
           { UNPAIR ;
             ITER { PUSH nat 0 ;
                    DUP 2 ;
                    GET 4 ;
                    COMPARE ;
                    EQ ;
                    IF { DROP }
                       { CAR ;
                         IF_NONE
                           {}
                           { DUP 2 ;
                             SWAP ;
                             COMPARE ;
                             EQ ;
                             IF { PUSH string "CANNOT_ACCEPT_TOKENS" ; FAILWITH } {} } } } ;
             DROP ;
             UNIT } ;
         LAMBDA
           (pair (map address (list nat)) address address address)
           (pair (list operation) (map address (list nat)))
           { UNPAIR 4 ;
             DUP ;
             DUP 4 ;
             GET ;
             IF_NONE
               { SWAP ; DIG 2 ; DIG 3 ; DROP 3 ; NIL operation }
               { MAP { PUSH nat 1 ; SWAP ; DUP 5 ; PAIR 3 } ;
                 DIG 2 ;
                 CONTRACT %transfer
                   (list (pair (address %from_) (list %txs (pair (address %to_) (nat %token_id) (nat %amount))))) ;
                 IF_NONE
                   { DIG 3 ; DROP 2 ; PUSH string "CANNOT_INVOKE_COLLECTIBLE_FA2" ; FAILWITH }
                   { PUSH mutez 0 ;
                     NIL (pair address (list (pair address nat nat))) ;
                     DIG 3 ;
                     DIG 6 ;
                     PAIR ;
                     CONS ;
                     TRANSFER_TOKENS } ;
                 SWAP ;
                 DIG 2 ;
                 NONE (list nat) ;
                 SWAP ;
                 UPDATE ;
                 NIL operation ;
                 DIG 2 ;
                 CONS } ;
             PAIR } ;
         LAMBDA
           (pair (map address nat) (pair address nat) address address)
           (pair (list operation) (map address nat))
           { UNPAIR 4 ;
             DUP ;
             DUP 4 ;
             GET ;
             IF_NONE
               { SWAP ; DIG 2 ; DIG 3 ; DROP 3 ; NIL operation }
               { DUP 3 ;
                 CAR ;
                 CONTRACT %transfer
                   (list (pair (address %from_) (list %txs (pair (address %to_) (nat %token_id) (nat %amount))))) ;
                 IF_NONE
                   { DIG 2 ; DIG 4 ; DROP 3 ; PUSH string "CANNOT_INVOKE_MONEY_FA2" ; FAILWITH }
                   { PUSH mutez 0 ;
                     NIL (pair address (list (pair address nat nat))) ;
                     NIL (pair address nat nat) ;
                     DIG 4 ;
                     DIG 6 ;
                     CDR ;
                     DUP 8 ;
                     PAIR 3 ;
                     CONS ;
                     DIG 6 ;
                     PAIR ;
                     CONS ;
                     TRANSFER_TOKENS } ;
                 SWAP ;
                 DIG 2 ;
                 NONE nat ;
                 SWAP ;
                 UPDATE ;
                 NIL operation ;
                 DIG 2 ;
                 CONS } ;
             PAIR } ;
         LAMBDA
           (pair address address)
           unit
           { UNPAIR ;
             COMPARE ;
             EQ ;
             IF { UNIT } { PUSH string "NOT_PROMOTER" ; FAILWITH } } ;
         DIG 4 ;
         UNPAIR ;
         IF_LEFT
           { DIG 3 ;
             DIG 4 ;
             DIG 5 ;
             DROP 4 ;
             SENDER ;
             SWAP ;
             IF_LEFT
               { SWAP ;
                 DUP 2 ;
                 CAR ;
                 PAIR ;
                 DIG 2 ;
                 SWAP ;
                 EXEC ;
                 DROP ;
                 EMPTY_MAP address (list nat) ;
                 EMPTY_MAP address nat ;
                 DIG 2 ;
                 PAIR 3 ;
                 RIGHT
                   (pair (pair address (pair address nat) address nat)
                         (list nat)
                         (map address nat)
                         (map address (list nat))) ;
                 RIGHT (pair address (pair address nat) address nat) }
               { IF_LEFT
                   { SWAP ;
                     DUP 2 ;
                     CAR ;
                     CAR ;
                     PAIR ;
                     DIG 2 ;
                     SWAP ;
                     EXEC ;
                     DROP ;
                     DUP ;
                     GET 6 ;
                     DUP 2 ;
                     CAR ;
                     CAR ;
                     GET ;
                     IF_NONE { DUP ; GET 3 } { DUP 2 ; GET 3 ; ITER { CONS } } ;
                     DUP 2 ;
                     GET 6 ;
                     SWAP ;
                     SOME ;
                     DUP 3 ;
                     CAR ;
                     CAR ;
                     UPDATE ;
                     DUP 2 ;
                     GET 5 ;
                     DIG 2 ;
                     CAR ;
                     PAIR 3 ;
                     RIGHT
                       (pair (pair address (pair address nat) address nat)
                             (list nat)
                             (map address nat)
                             (map address (list nat))) ;
                     RIGHT (pair address (pair address nat) address nat) }
                   { DROP 3 ; PUSH string "PROMO_FINISHED" ; FAILWITH } } ;
             NIL operation ;
             PAIR }
           { DIG 2 ;
             DROP ;
             IF_LEFT
               { DIG 2 ;
                 DIG 4 ;
                 DROP 3 ;
                 SENDER ;
                 SELF_ADDRESS ;
                 DIG 2 ;
                 IF_LEFT
                   { DROP 4 ; PUSH string "PROMO_NOT_STARTED" ; FAILWITH }
                   { IF_LEFT
                       { SWAP ;
                         DIG 2 ;
                         DUP 3 ;
                         CAR ;
                         GET 5 ;
                         DUP 4 ;
                         GET 6 ;
                         PAIR 4 ;
                         DIG 2 ;
                         SWAP ;
                         EXEC ;
                         UNPAIR ;
                         DUG 2 ;
                         UPDATE 6 ;
                         LEFT (pair (pair address (pair address nat) address nat)
                                    (map address nat)
                                    (map address (list nat))) }
                       { SWAP ;
                         DIG 2 ;
                         DUP 3 ;
                         CAR ;
                         GET 5 ;
                         DUP 4 ;
                         GET 4 ;
                         PAIR 4 ;
                         DIG 2 ;
                         SWAP ;
                         EXEC ;
                         UNPAIR ;
                         DUG 2 ;
                         UPDATE 4 ;
                         RIGHT
                           (pair (pair address (pair address nat) address nat)
                                 (list nat)
                                 (map address nat)
                                 (map address (list nat))) } ;
                     RIGHT (pair address (pair address nat) address nat) ;
                     SWAP ;
                     PAIR } }
               { DIG 3 ;
                 DROP ;
                 IF_LEFT
                   { DIG 3 ;
                     DROP 2 ;
                     SENDER ;
                     SELF_ADDRESS ;
                     DIG 2 ;
                     IF_LEFT
                       { DROP 4 ; PUSH string "PROMO_NOT_STARTED" ; FAILWITH }
                       { IF_LEFT
                           { SWAP ;
                             DIG 2 ;
                             DUP 3 ;
                             CAR ;
                             GET 3 ;
                             DUP 4 ;
                             GET 5 ;
                             PAIR 4 ;
                             DIG 2 ;
                             SWAP ;
                             EXEC ;
                             UNPAIR ;
                             DUG 2 ;
                             UPDATE 5 ;
                             LEFT (pair (pair address (pair address nat) address nat)
                                        (map address nat)
                                        (map address (list nat))) }
                           { SWAP ;
                             DIG 2 ;
                             DUP 3 ;
                             CAR ;
                             GET 3 ;
                             DUP 4 ;
                             GET 3 ;
                             PAIR 4 ;
                             DIG 2 ;
                             SWAP ;
                             EXEC ;
                             UNPAIR ;
                             DUG 2 ;
                             UPDATE 3 ;
                             RIGHT
                               (pair (pair address (pair address nat) address nat)
                                     (list nat)
                                     (map address nat)
                                     (map address (list nat))) } ;
                         RIGHT (pair address (pair address nat) address nat) ;
                         SWAP ;
                         PAIR } }
                   { DIG 2 ;
                     DROP ;
                     SWAP ;
                     IF_LEFT
                       { DUP ;
                         GET 5 ;
                         SENDER ;
                         COMPARE ;
                         NEQ ;
                         IF { DROP 3 ; PUSH string "PROMO_COLLECTIBLES_EXPECTED" ; FAILWITH }
                            { NIL nat ;
                              DIG 2 ;
                              CAR ;
                              ITER { SWAP ;
                                     DUP 2 ;
                                     CAR ;
                                     IF_NONE
                                       { PUSH bool False }
                                       { DUP 4 ;
                                         CAR ;
                                         SWAP ;
                                         COMPARE ;
                                         EQ ;
                                         IF { PUSH bool True } { PUSH bool False } } ;
                                     IF { NIL nat ;
                                          DIG 2 ;
                                          CDR ;
                                          ITER { SWAP ;
                                                 PUSH nat 0 ;
                                                 DUP 3 ;
                                                 GET 4 ;
                                                 COMPARE ;
                                                 EQ ;
                                                 IF { SWAP ; DROP }
                                                    { PUSH nat 1 ;
                                                      DUP 3 ;
                                                      GET 4 ;
                                                      COMPARE ;
                                                      GT ;
                                                      IF { DROP 2 ; PUSH string "NON_NFT_RECEIVED" ; FAILWITH }
                                                         { DUP 2 ;
                                                           CAR ;
                                                           IF_NONE
                                                             { SWAP ; DROP }
                                                             { SELF_ADDRESS ;
                                                               SWAP ;
                                                               COMPARE ;
                                                               EQ ;
                                                               IF { SWAP ; GET 3 ; CONS } { SWAP ; DROP } } } } } ;
                                          ITER { CONS } }
                                        { SELF_ADDRESS ; DIG 2 ; CDR ; PAIR ; DUP 4 ; SWAP ; EXEC ; DROP } } ;
                              DIG 2 ;
                              DROP ;
                              EMPTY_MAP address (list nat) ;
                              EMPTY_MAP address nat ;
                              DIG 2 ;
                              DIG 3 ;
                              PAIR 4 ;
                              LEFT (pair (pair address (pair address nat) address nat)
                                         (map address nat)
                                         (map address (list nat))) ;
                              RIGHT (pair address (pair address nat) address nat) } }
                       { IF_LEFT
                           { DUP ;
                             CAR ;
                             GET 3 ;
                             CAR ;
                             SENDER ;
                             COMPARE ;
                             NEQ ;
                             IF { DROP 3 ; PUSH string "PROMO_MONEY_TOKENS_EXPECTED" ; FAILWITH }
                                { SWAP ;
                                  CAR ;
                                  ITER { SWAP ;
                                         DUP 2 ;
                                         CAR ;
                                         IF_NONE
                                           { SELF_ADDRESS ; DIG 2 ; CDR ; PAIR ; DUP 3 ; SWAP ; EXEC ; DROP }
                                           { SWAP ;
                                             DIG 2 ;
                                             CDR ;
                                             ITER { SWAP ;
                                                    DUP 2 ;
                                                    CAR ;
                                                    IF_NONE
                                                      { SWAP ; DROP }
                                                      { SELF_ADDRESS ;
                                                        SWAP ;
                                                        COMPARE ;
                                                        NEQ ;
                                                        IF { SWAP ; DROP }
                                                           { DUP ;
                                                             CAR ;
                                                             GET 3 ;
                                                             CDR ;
                                                             DUP 3 ;
                                                             GET 3 ;
                                                             COMPARE ;
                                                             NEQ ;
                                                             IF { DROP 2 ; PUSH string "PROMO_MONEY_TOKENS_EXPECTED" ; FAILWITH }
                                                                { SWAP ;
                                                                  GET 4 ;
                                                                  DUP 2 ;
                                                                  GET 5 ;
                                                                  DUP 4 ;
                                                                  GET ;
                                                                  IF_NONE {} { ADD } ;
                                                                  DUP 2 ;
                                                                  DUP 3 ;
                                                                  GET 5 ;
                                                                  DIG 3 ;
                                                                  CAR ;
                                                                  CAR ;
                                                                  GET ;
                                                                  IF_NONE { PUSH nat 0 } {} ;
                                                                  DIG 2 ;
                                                                  DUP 4 ;
                                                                  PAIR 4 ;
                                                                  LEFT (pair address
                                                                             nat
                                                                             nat
                                                                             (pair (pair address (pair address nat) address nat)
                                                                                   (list nat)
                                                                                   (map address nat)
                                                                                   (map address (list nat)))) ;
                                                                  LOOP_LEFT
                                                                    { DUP ;
                                                                      GET 6 ;
                                                                      GET 3 ;
                                                                      IF_CONS
                                                                        { DUP 3 ;
                                                                          GET 6 ;
                                                                          CAR ;
                                                                          GET 6 ;
                                                                          DUP 4 ;
                                                                          GET 3 ;
                                                                          SUB ;
                                                                          ISNAT ;
                                                                          IF_NONE
                                                                            { DROP 2 ;
                                                                              RIGHT
                                                                                (pair address
                                                                                      nat
                                                                                      nat
                                                                                      (pair (pair address (pair address nat) address nat)
                                                                                            (list nat)
                                                                                            (map address nat)
                                                                                            (map address (list nat)))) }
                                                                            { DUP 4 ;
                                                                              GET 6 ;
                                                                              DUP 5 ;
                                                                              GET 6 ;
                                                                              GET 6 ;
                                                                              DUP 6 ;
                                                                              GET 6 ;
                                                                              GET 6 ;
                                                                              DUP 7 ;
                                                                              CAR ;
                                                                              GET ;
                                                                              IF_NONE { NIL nat } {} ;
                                                                              DIG 4 ;
                                                                              CONS ;
                                                                              SOME ;
                                                                              DUP 6 ;
                                                                              CAR ;
                                                                              UPDATE ;
                                                                              UPDATE 6 ;
                                                                              DIG 2 ;
                                                                              UPDATE 3 ;
                                                                              DUP 3 ;
                                                                              GET 6 ;
                                                                              CAR ;
                                                                              GET 6 ;
                                                                              DUP 4 ;
                                                                              GET 5 ;
                                                                              ADD ;
                                                                              DIG 2 ;
                                                                              DIG 3 ;
                                                                              CAR ;
                                                                              PAIR 4 ;
                                                                              LEFT (pair address
                                                                                         nat
                                                                                         nat
                                                                                         (pair (pair address (pair address nat) address nat)
                                                                                               (list nat)
                                                                                               (map address nat)
                                                                                               (map address (list nat)))) } }
                                                                        { RIGHT
                                                                            (pair address
                                                                                  nat
                                                                                  nat
                                                                                  (pair (pair address (pair address nat) address nat)
                                                                                        (list nat)
                                                                                        (map address nat)
                                                                                        (map address (list nat)))) } } ;
                                                                  DUP ;
                                                                  GET 6 ;
                                                                  DUP 2 ;
                                                                  GET 6 ;
                                                                  GET 5 ;
                                                                  DUP 3 ;
                                                                  GET 3 ;
                                                                  SOME ;
                                                                  DUP 4 ;
                                                                  CAR ;
                                                                  UPDATE ;
                                                                  DUP 3 ;
                                                                  GET 5 ;
                                                                  SOME ;
                                                                  DIG 3 ;
                                                                  GET 6 ;
                                                                  CAR ;
                                                                  CAR ;
                                                                  UPDATE ;
                                                                  UPDATE 5 } } } } ;
                                             SWAP ;
                                             DROP } } ;
                                  SWAP ;
                                  DROP ;
                                  PUSH nat 0 ;
                                  DUP 2 ;
                                  GET 3 ;
                                  SIZE ;
                                  COMPARE ;
                                  EQ ;
                                  IF { DUP ;
                                       GET 6 ;
                                       DUP 2 ;
                                       GET 5 ;
                                       DIG 2 ;
                                       CAR ;
                                       PAIR 3 ;
                                       RIGHT
                                         (pair (pair address (pair address nat) address nat)
                                               (list nat)
                                               (map address nat)
                                               (map address (list nat))) }
                                     { LEFT (pair (pair address (pair address nat) address nat)
                                                  (map address nat)
                                                  (map address (list nat))) } ;
                                  RIGHT (pair address (pair address nat) address nat) } }
                           { DROP 3 ; PUSH string "PROMO_FINISHED" ; FAILWITH } } ;
                     NIL operation ;
                     PAIR } } } } }

