{ parameter
    (or (or %admin (address %set_admin) (or (unit %confirm_admin) (bool %pause)))
        (or %assets
           (list %transfer
              (pair (address %from_) (list %txs (pair (address %to_) (nat %token_id) (nat %amount)))))
           (or (pair %balance_of
                  (list %requests (pair (address %owner) (nat %token_id)))
                  (contract %callback
                     (list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)))))
               (list %update_operators
                  (or (pair %add_operator (address %owner) (address %operator) (nat %token_id))
                      (pair %remove_operator (address %owner) (address %operator) (nat %token_id))))))) ;
  storage
    (pair (pair %assets
             (big_map %ledger nat address)
             (big_map %operators (pair address address nat) unit)
             (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes)))
             (pair %permissions
                (or %operator
                   (unit %no_transfer)
                   (or (unit %owner_transfer) (unit %owner_or_operator_transfer)))
                (or %receiver
                   (unit %owner_no_hook)
                   (or (unit %optional_owner_hook) (unit %required_owner_hook)))
                (or %sender
                   (unit %owner_no_hook)
                   (or (unit %optional_owner_hook) (unit %required_owner_hook)))
                (option %custom (pair (string %tag) (option %config_api address)))))
          (pair %admin (address %admin) (option %pending_admin address) (bool %paused))
          (big_map %metadata string bytes)) ;
  code { PUSH string "FA2_TOKEN_UNDEFINED" ;
         PUSH string "FA2_INSUFFICIENT_BALANCE" ;
         LAMBDA
           (pair (pair (list (pair (option address) (list (pair (option address) nat nat)))) address)
                 (lambda (pair (option address) (list (pair (option address) nat nat))) (list (option address)))
                 (lambda
                    address
                    (or (contract (pair (list (pair (option address) (list (pair (option address) nat nat)))) address))
                        string))
                 bool)
           (list (contract (pair (list (pair (option address) (list (pair (option address) nat nat)))) address)))
           { UNPAIR 4 ;
             EMPTY_SET address ;
             SWAP ;
             CAR ;
             ITER { DUP 3 ;
                    SWAP ;
                    EXEC ;
                    ITER { IF_NONE {} { PUSH bool True ; SWAP ; UPDATE } } } ;
             SWAP ;
             DROP ;
             NIL (contract (pair (list (pair (option address) (list (pair (option address) nat nat)))) address)) ;
             SWAP ;
             ITER { DUP 3 ;
                    SWAP ;
                    EXEC ;
                    IF_LEFT { CONS } { DUP 4 ; IF { SWAP ; DROP ; FAILWITH } { DROP } } } ;
             SWAP ;
             DIG 2 ;
             DROP 2 } ;
         LAMBDA
           (pair (lambda
                    (pair (pair (list (pair (option address) (list (pair (option address) nat nat)))) address)
                          (lambda (pair (option address) (list (pair (option address) nat nat))) (list (option address)))
                          (lambda
                             address
                             (or (contract (pair (list (pair (option address) (list (pair (option address) nat nat)))) address))
                                 string))
                          bool)
                    (list (contract (pair (list (pair (option address) (list (pair (option address) nat nat)))) address))))
                 (pair (pair (list (pair (option address) (list (pair (option address) nat nat)))) address)
                       (or unit (or unit unit))
                       (lambda (pair (option address) (list (pair (option address) nat nat))) (list (option address)))
                       (lambda
                          address
                          (or (contract (pair (list (pair (option address) (list (pair (option address) nat nat)))) address))
                              string))))
           (list (contract (pair (list (pair (option address) (list (pair (option address) nat nat)))) address)))
           { UNPAIR ;
             SWAP ;
             UNPAIR 4 ;
             SWAP ;
             IF_LEFT
               { DROP 5 ;
                 NIL (contract (pair (list (pair (option address) (list (pair (option address) nat nat)))) address)) }
               { IF_LEFT
                   { DROP ; PUSH bool False ; DUG 3 ; PAIR 4 ; EXEC }
                   { DROP ; PUSH bool True ; DUG 3 ; PAIR 4 ; EXEC } } } ;
         DUP 2 ;
         APPLY ;
         SWAP ;
         DROP ;
         LAMBDA
           (pair address (option address) bool)
           unit
           { CAR ;
             SENDER ;
             COMPARE ;
             NEQ ;
             IF { PUSH string "NOT_AN_ADMIN" ; FAILWITH } { UNIT } } ;
         DIG 4 ;
         UNPAIR ;
         IF_LEFT
           { DIG 3 ;
             DIG 4 ;
             DIG 5 ;
             DROP 3 ;
             DUP 2 ;
             GET 3 ;
             SWAP ;
             IF_LEFT
               { DUP 2 ; DIG 4 ; SWAP ; EXEC ; DROP ; SOME ; UPDATE 3 }
               { IF_LEFT
                   { DIG 3 ;
                     DROP 2 ;
                     DUP ;
                     GET 3 ;
                     IF_NONE
                       { DROP ; PUSH string "NO_PENDING_ADMIN" ; FAILWITH }
                       { SENDER ;
                         SWAP ;
                         DUP 2 ;
                         COMPARE ;
                         EQ ;
                         IF { SWAP ; NONE address ; UPDATE 3 ; SWAP ; UPDATE 1 }
                            { DROP 2 ; PUSH string "NOT_A_PENDING_ADMIN" ; FAILWITH } } }
                   { DUP 2 ; DIG 4 ; SWAP ; EXEC ; DROP ; UPDATE 4 } } ;
             NIL operation ;
             DUG 2 ;
             UPDATE 3 }
           { DIG 2 ;
             DROP ;
             DUP 2 ;
             GET 3 ;
             GET 4 ;
             IF { PUSH string "PAUSED" ; FAILWITH } {} ;
             DUP 2 ;
             CAR ;
             SWAP ;
             IF_LEFT
               { DUP 2 ;
                 CAR ;
                 DUP 2 ;
                 ITER { SWAP ;
                        DUP 2 ;
                        CDR ;
                        ITER { SWAP ;
                               PUSH nat 0 ;
                               DUP 3 ;
                               GET 4 ;
                               COMPARE ;
                               EQ ;
                               IF { SWAP ; DROP }
                                  { PUSH nat 1 ;
                                    DUP 3 ;
                                    GET 4 ;
                                    COMPARE ;
                                    NEQ ;
                                    IF { DROP 2 ; DUP 6 ; FAILWITH }
                                       { DUP ;
                                         DUP 3 ;
                                         GET 3 ;
                                         GET ;
                                         IF_NONE
                                           { DROP 2 ; DUP 7 ; FAILWITH }
                                           { DUP 4 ;
                                             CAR ;
                                             SWAP ;
                                             COMPARE ;
                                             NEQ ;
                                             IF { DROP 2 ; DUP 6 ; FAILWITH }
                                                { SENDER ;
                                                  DUP 4 ;
                                                  CAR ;
                                                  DUP 2 ;
                                                  DUP 2 ;
                                                  COMPARE ;
                                                  EQ ;
                                                  IF { DROP 2 }
                                                     { DUP 7 ;
                                                       GET 3 ;
                                                       DUP 5 ;
                                                       GET 3 ;
                                                       DIG 3 ;
                                                       PAIR ;
                                                       DIG 2 ;
                                                       PAIR ;
                                                       MEM ;
                                                       IF {} { PUSH string "FA2_NOT_OPERATOR" ; FAILWITH } } ;
                                                  DUP 2 ;
                                                  CAR ;
                                                  SOME ;
                                                  DIG 2 ;
                                                  GET 3 ;
                                                  UPDATE } } } } } ;
                        SWAP ;
                        DROP } ;
                 DIG 5 ;
                 DIG 6 ;
                 DROP 2 ;
                 SENDER ;
                 DIG 2 ;
                 MAP { DUP ;
                       CDR ;
                       MAP { DUP ; GET 4 ; DUP 2 ; GET 3 ; DIG 2 ; CAR ; SOME ; PAIR 3 } ;
                       SWAP ;
                       CAR ;
                       SOME ;
                       PAIR } ;
                 PAIR ;
                 DUP 3 ;
                 GET 6 ;
                 LAMBDA
                   address
                   (or (contract (pair (list (pair (option address) (list (pair (option address) nat nat)))) address))
                       string)
                   { CONTRACT %tokens_sent
                       (pair (list %batch
                                (pair (option %from_ address)
                                      (list %txs (pair (option %to_ address) (nat %token_id) (nat %amount)))))
                             (address %operator)) ;
                     IF_NONE
                       { PUSH string "FA2_SENDER_HOOK_UNDEFINED" ;
                         RIGHT
                           (contract (pair (list (pair (option address) (list (pair (option address) nat nat)))) address)) }
                       { LEFT string } } ;
                 LAMBDA
                   (pair (option address) (list (pair (option address) nat nat)))
                   (list (option address))
                   { NIL (option address) ; SWAP ; CAR ; CONS } ;
                 DUP 3 ;
                 GET 5 ;
                 DUP 5 ;
                 PAIR 4 ;
                 DUP 7 ;
                 SWAP ;
                 EXEC ;
                 LAMBDA
                   address
                   (or (contract (pair (list (pair (option address) (list (pair (option address) nat nat)))) address))
                       string)
                   { CONTRACT %tokens_received
                       (pair (list %batch
                                (pair (option %from_ address)
                                      (list %txs (pair (option %to_ address) (nat %token_id) (nat %amount)))))
                             (address %operator)) ;
                     IF_NONE
                       { PUSH string "FA2_RECEIVER_HOOK_UNDEFINED" ;
                         RIGHT
                           (contract (pair (list (pair (option address) (list (pair (option address) nat nat)))) address)) }
                       { LEFT string } } ;
                 LAMBDA
                   (pair (option address) (list (pair (option address) nat nat)))
                   (list (option address))
                   { CDR ; MAP { CAR } } ;
                 DIG 3 ;
                 GET 3 ;
                 DUP 5 ;
                 PAIR 4 ;
                 DIG 6 ;
                 SWAP ;
                 EXEC ;
                 ITER { CONS } ;
                 DUP ;
                 IF_CONS
                   { DROP 2 ; MAP { PUSH mutez 0 ; DUP 3 ; TRANSFER_TOKENS } ; SWAP ; DROP }
                   { DROP 2 ; NIL operation } ;
                 DUG 2 ;
                 UPDATE 1 ;
                 SWAP }
               { DIG 3 ;
                 DIG 4 ;
                 DROP 2 ;
                 IF_LEFT
                   { DUP ;
                     CAR ;
                     MAP { DUP 3 ;
                           CAR ;
                           DUP 2 ;
                           CDR ;
                           GET ;
                           IF_NONE
                             { DROP ; DUP 4 ; FAILWITH }
                             { DUP 2 ;
                               CAR ;
                               SWAP ;
                               COMPARE ;
                               EQ ;
                               IF { PUSH nat 1 } { PUSH nat 0 } ;
                               SWAP ;
                               PAIR } } ;
                     DIG 4 ;
                     DROP ;
                     SWAP ;
                     CDR ;
                     PUSH mutez 0 ;
                     DIG 2 ;
                     TRANSFER_TOKENS ;
                     SWAP ;
                     NIL operation ;
                     DIG 2 ;
                     CONS }
                   { DIG 3 ;
                     DROP ;
                     SENDER ;
                     DUP 3 ;
                     GET 3 ;
                     DIG 2 ;
                     ITER { SWAP ;
                            DUP 3 ;
                            DUP 3 ;
                            IF_LEFT {} {} ;
                            CAR ;
                            COMPARE ;
                            EQ ;
                            IF {} { PUSH string "FA2_NOT_OWNER" ; FAILWITH } ;
                            SWAP ;
                            IF_LEFT
                              { SWAP ;
                                UNIT ;
                                SOME ;
                                DUP 3 ;
                                GET 4 ;
                                DUP 4 ;
                                GET 3 ;
                                PAIR ;
                                DIG 3 ;
                                CAR ;
                                PAIR ;
                                UPDATE }
                              { SWAP ;
                                DUP 2 ;
                                GET 4 ;
                                DUP 3 ;
                                GET 3 ;
                                PAIR ;
                                DIG 2 ;
                                CAR ;
                                PAIR ;
                                NONE unit ;
                                SWAP ;
                                UPDATE } } ;
                     SWAP ;
                     DROP ;
                     UPDATE 3 ;
                     NIL operation } } ;
             DUG 2 ;
             UPDATE 1 } ;
         SWAP ;
         PAIR } }

