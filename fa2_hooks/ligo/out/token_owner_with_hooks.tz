{ parameter
    (or (or (or %owner
               (or (unit %default) (pair %owner_add_operator (address %fa2) (address %operator)))
               (pair %owner_remove_operator (address %fa2) (address %operator)))
            (pair %tokens_received
               (list %batch
                  (pair (option %from_ address)
                        (list %txs (pair (option %to_ address) (pair (nat %token_id) (nat %amount))))))
               (address %operator)))
        (pair %tokens_sent
           (list %batch
              (pair (option %from_ address)
                    (list %txs (pair (option %to_ address) (pair (nat %token_id) (nat %amount))))))
           (address %operator))) ;
  storage (map (pair address nat) nat) ;
  code { LAMBDA
           (pair (list (pair (option address) (list (pair (option address) (pair nat nat))))) address)
           (pair (list (pair (option address) (list (pair (pair nat (option address)) nat)))) address)
           { DUP ;
             CAR ;
             MAP { DUP ;
                   CDR ;
                   MAP { DUP ;
                         CDR ;
                         CAR ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         CAR ;
                         DIG 2 ;
                         CDR ;
                         CDR ;
                         PAIR ;
                         PAIR } ;
                   SWAP ;
                   CAR ;
                   PAIR } ;
             SWAP ;
             CDR ;
             SWAP ;
             PAIR } ;
         LAMBDA
           (pair address address)
           (pair address address)
           { DUP ; CAR ; SWAP ; CDR ; PAIR } ;
         LAMBDA
           (pair (lambda (pair address address) (pair address address))
                 (or (pair address address) (pair address address)))
           (or (pair address address) (pair address address))
           { DUP ;
             CDR ;
             SWAP ;
             CAR ;
             SWAP ;
             IF_LEFT
               { EXEC ; LEFT (pair (address %owner) (address %operator)) }
               { EXEC ; RIGHT (pair (address %owner) (address %operator)) } ;
             IF_LEFT
               { LEFT (pair (address %owner) (address %operator)) }
               { RIGHT (pair (address %owner) (address %operator)) } } ;
         SWAP ;
         APPLY ;
         DIG 2 ;
         DUP ;
         DUG 3 ;
         CDR ;
         DIG 3 ;
         CAR ;
         IF_LEFT
           { IF_LEFT
               { DIG 3 ;
                 DROP ;
                 IF_LEFT
                   { IF_LEFT
                       { DIG 2 ; DROP 2 ; UNIT ; NIL operation ; PAIR }
                       { SELF ;
                         ADDRESS ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         CDR ;
                         PAIR ;
                         LEFT (pair (address %operator) (address %owner)) ;
                         DIG 3 ;
                         SWAP ;
                         EXEC ;
                         SWAP ;
                         CAR ;
                         CONTRACT %update_operators
                           (list (or (pair %add_operator (address %owner) (address %operator))
                                     (pair %remove_operator (address %owner) (address %operator)))) ;
                         IF_NONE
                           { PUSH string "bad address for get_entrypoint (%update_operators)" ;
                             FAILWITH }
                           {} ;
                         PUSH mutez 0 ;
                         NIL (or (pair address address) (pair address address)) ;
                         DIG 3 ;
                         CONS ;
                         TRANSFER_TOKENS ;
                         UNIT ;
                         NIL operation ;
                         DIG 2 ;
                         CONS ;
                         PAIR } }
                   { SELF ;
                     ADDRESS ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CDR ;
                     PAIR ;
                     RIGHT (pair (address %operator) (address %owner)) ;
                     DIG 3 ;
                     SWAP ;
                     EXEC ;
                     SWAP ;
                     CAR ;
                     CONTRACT %update_operators
                       (list (or (pair %add_operator (address %owner) (address %operator))
                                 (pair %remove_operator (address %owner) (address %operator)))) ;
                     IF_NONE
                       { PUSH string "bad address for get_entrypoint (%update_operators)" ;
                         FAILWITH }
                       {} ;
                     PUSH mutez 0 ;
                     NIL (or (pair address address) (pair address address)) ;
                     DIG 3 ;
                     CONS ;
                     TRANSFER_TOKENS ;
                     UNIT ;
                     NIL operation ;
                     DIG 2 ;
                     CONS ;
                     PAIR } ;
                 CAR ;
                 PAIR }
               { DIG 2 ;
                 DROP ;
                 PAIR ;
                 DUP ;
                 CAR ;
                 DIG 2 ;
                 SWAP ;
                 EXEC ;
                 SWAP ;
                 CDR ;
                 SWAP ;
                 CAR ;
                 ITER { CDR ;
                        ITER { DUP ;
                               CAR ;
                               CDR ;
                               IF_NONE
                                 { DROP }
                                 { SELF ;
                                   ADDRESS ;
                                   SWAP ;
                                   COMPARE ;
                                   NEQ ;
                                   IF { DROP }
                                      { DUP ;
                                        CDR ;
                                        SENDER ;
                                        PAIR ;
                                        DIG 2 ;
                                        DUP ;
                                        DUG 3 ;
                                        SWAP ;
                                        DUP ;
                                        DUG 2 ;
                                        GET ;
                                        IF_NONE { SWAP ; CAR ; CAR } { DIG 2 ; CAR ; CAR ; ADD } ;
                                        DIG 2 ;
                                        SWAP ;
                                        SOME ;
                                        DIG 2 ;
                                        UPDATE } } } } ;
                 NIL operation ;
                 PAIR } }
           { DIG 2 ;
             DROP ;
             PAIR ;
             DUP ;
             CAR ;
             DIG 2 ;
             SWAP ;
             EXEC ;
             SWAP ;
             CDR ;
             SWAP ;
             CAR ;
             ITER { DUP ;
                    CAR ;
                    IF_NONE
                      { DROP }
                      { SELF ;
                        ADDRESS ;
                        SWAP ;
                        COMPARE ;
                        NEQ ;
                        IF { DROP }
                           { CDR ;
                             ITER { DUP ;
                                    CDR ;
                                    SENDER ;
                                    PAIR ;
                                    SWAP ;
                                    CAR ;
                                    CAR ;
                                    DIG 2 ;
                                    DUP ;
                                    DUG 3 ;
                                    DIG 2 ;
                                    DUP ;
                                    DUG 3 ;
                                    GET ;
                                    IF_NONE { PUSH nat 0 } {} ;
                                    SUB ;
                                    ISNAT ;
                                    IF_NONE { PUSH string "NEGATIVE BALANCE" ; FAILWITH } {} ;
                                    DIG 2 ;
                                    SWAP ;
                                    SOME ;
                                    DIG 2 ;
                                    UPDATE } } } } ;
             NIL operation ;
             PAIR } } }

