{ parameter
    (or (or (pair %balance_of
               (list %requests (pair (address %owner) (nat %token_id)))
               (contract %callback
                  (list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)))))
            (contract %token_metadata_registry address))
        (or (list %transfer
               (pair (address %from_)
                     (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))))
            (list %update_operators
               (or (pair %add_operator (address %owner) (address %operator))
                   (pair %remove_operator (address %owner) (address %operator)))))) ;
  storage
    (pair (pair (big_map %ledger nat address) (big_map %operators (pair address address) unit))
          (big_map %token_metadata
             nat
             (pair (nat %token_id)
                   (pair (string %symbol)
                         (pair (string %name) (pair (nat %decimals) (map %extras string string))))))) ;
  code { PUSH string "FA2_TOKEN_UNDEFINED" ;
         PUSH string "FA2_INSUFFICIENT_BALANCE" ;
         LAMBDA
           (pair address address)
           (pair address address)
           { DUP ; CAR ; SWAP ; CDR ; PAIR } ;
         DIG 3 ;
         DUP ;
         DUG 4 ;
         CDR ;
         DIG 4 ;
         CAR ;
         IF_LEFT
           { DIG 2 ;
             DROP ;
             DIG 2 ;
             DROP ;
             IF_LEFT
               { DUP ;
                 CAR ;
                 SWAP ;
                 CDR ;
                 PAIR ;
                 DUP ;
                 CDR ;
                 MAP {} ;
                 SWAP ;
                 CAR ;
                 PAIR ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 CAR ;
                 SWAP ;
                 PAIR ;
                 DUP ;
                 CAR ;
                 DUP ;
                 CDR ;
                 MAP { DIG 2 ;
                       DUP ;
                       DUG 3 ;
                       CDR ;
                       SWAP ;
                       DUP ;
                       DUG 2 ;
                       CDR ;
                       GET ;
                       IF_NONE
                         { DROP ; DIG 3 ; DUP ; DUG 4 ; FAILWITH }
                         { SWAP ;
                           DUP ;
                           CAR ;
                           DIG 2 ;
                           COMPARE ;
                           EQ ;
                           IF { PUSH nat 1 } { PUSH nat 0 } ;
                           PAIR } ;
                       DUP ;
                       CDR ;
                       CDR ;
                       SWAP ;
                       DUP ;
                       DUG 2 ;
                       CDR ;
                       CAR ;
                       PAIR ;
                       SWAP ;
                       CAR ;
                       SWAP ;
                       PAIR } ;
                 DIG 2 ;
                 DROP ;
                 DIG 3 ;
                 DROP ;
                 SWAP ;
                 CAR ;
                 PUSH mutez 0 ;
                 DIG 2 ;
                 TRANSFER_TOKENS ;
                 SWAP ;
                 NIL operation ;
                 DIG 2 ;
                 CONS ;
                 PAIR }
               { DIG 2 ;
                 DROP ;
                 PUSH mutez 0 ;
                 SELF ;
                 ADDRESS ;
                 TRANSFER_TOKENS ;
                 SWAP ;
                 NIL operation ;
                 DIG 2 ;
                 CONS ;
                 PAIR } }
           { IF_LEFT
               { DIG 2 ;
                 DROP ;
                 MAP { DUP ;
                       CDR ;
                       MAP { DUP ;
                             CDR ;
                             CAR ;
                             SWAP ;
                             DUP ;
                             DUG 2 ;
                             CAR ;
                             DIG 2 ;
                             CDR ;
                             CDR ;
                             PAIR ;
                             PAIR } ;
                       SWAP ;
                       CAR ;
                       PAIR } ;
                 SENDER ;
                 LAMBDA
                   (pair address (pair address (big_map (pair address address) unit)))
                   unit
                   { DUP ;
                     CDR ;
                     SWAP ;
                     CAR ;
                     SWAP ;
                     DUP ;
                     CAR ;
                     DIG 2 ;
                     DUP ;
                     DUG 3 ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     COMPARE ;
                     EQ ;
                     IF { DROP 3 ; UNIT }
                        { SWAP ;
                          CDR ;
                          DUG 2 ;
                          PAIR ;
                          MEM ;
                          IF { UNIT } { PUSH string "FA2_NOT_OPERATOR" ; FAILWITH } } } ;
                 SWAP ;
                 APPLY ;
                 DIG 2 ;
                 DUP ;
                 DUG 3 ;
                 CAR ;
                 CAR ;
                 DIG 3 ;
                 DUP ;
                 DUG 4 ;
                 CAR ;
                 CDR ;
                 PAIR ;
                 SWAP ;
                 DIG 2 ;
                 PAIR ;
                 PAIR ;
                 DUP ;
                 CDR ;
                 CDR ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 CAR ;
                 ITER { SWAP ;
                        PAIR ;
                        DUP ;
                        CDR ;
                        DIG 2 ;
                        DUP ;
                        DUG 3 ;
                        CDR ;
                        CAR ;
                        SWAP ;
                        DUP ;
                        DUG 2 ;
                        CAR ;
                        PAIR ;
                        DIG 3 ;
                        DUP ;
                        DUG 4 ;
                        CAR ;
                        CDR ;
                        SWAP ;
                        EXEC ;
                        DROP ;
                        SWAP ;
                        CAR ;
                        SWAP ;
                        DUP ;
                        DUG 2 ;
                        CDR ;
                        ITER { PUSH nat 0 ;
                               SWAP ;
                               DUP ;
                               DUG 2 ;
                               CAR ;
                               CAR ;
                               COMPARE ;
                               EQ ;
                               IF { DROP }
                                  { PUSH nat 1 ;
                                    SWAP ;
                                    DUP ;
                                    DUG 2 ;
                                    CAR ;
                                    CAR ;
                                    COMPARE ;
                                    NEQ ;
                                    IF { DROP 2 ; DIG 3 ; DUP ; DUG 4 ; FAILWITH }
                                       { SWAP ;
                                         DUP ;
                                         DUG 2 ;
                                         SWAP ;
                                         DUP ;
                                         DUG 2 ;
                                         CDR ;
                                         GET ;
                                         IF_NONE
                                           { DROP 2 ; DIG 4 ; DUP ; DUG 5 ; FAILWITH }
                                           { DIG 3 ;
                                             DUP ;
                                             DUG 4 ;
                                             CAR ;
                                             SWAP ;
                                             COMPARE ;
                                             NEQ ;
                                             IF { DROP 2 ; DIG 3 ; DUP ; DUG 4 ; FAILWITH }
                                                { DUP ; DUG 2 ; CAR ; CDR ; SOME ; DIG 2 ; CDR ; UPDATE } } } } } ;
                        SWAP ;
                        DROP } ;
                 SWAP ;
                 DROP ;
                 DIG 2 ;
                 DROP ;
                 DIG 2 ;
                 DROP ;
                 DIP { DUP ; CDR ; SWAP ; CAR ; CDR } ;
                 PAIR ;
                 PAIR ;
                 NIL operation ;
                 PAIR }
               { DIG 3 ;
                 DROP ;
                 DIG 3 ;
                 DROP ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 CDR ;
                 SWAP ;
                 PAIR ;
                 DUP ;
                 CAR ;
                 MAP { IF_LEFT
                         { LEFT (pair (address %owner) (address %operator)) }
                         { RIGHT (pair (address %owner) (address %operator)) } ;
                       IF_LEFT
                         { DIG 3 ;
                           DUP ;
                           DUG 4 ;
                           SWAP ;
                           EXEC ;
                           LEFT (pair (address %operator) (address %owner)) }
                         { DIG 3 ;
                           DUP ;
                           DUG 4 ;
                           SWAP ;
                           EXEC ;
                           RIGHT (pair (address %operator) (address %owner)) } } ;
                 DIG 3 ;
                 DROP ;
                 SENDER ;
                 DIG 2 ;
                 CDR ;
                 DIG 2 ;
                 ITER { SWAP ;
                        PAIR ;
                        DUP ;
                        CDR ;
                        DIG 2 ;
                        DUP ;
                        DUG 3 ;
                        SWAP ;
                        DUP ;
                        DUG 2 ;
                        IF_LEFT {} {} ;
                        CDR ;
                        COMPARE ;
                        EQ ;
                        IF { UNIT } { PUSH string "FA2_NOT_OWNER" ; FAILWITH } ;
                        DROP ;
                        SWAP ;
                        CAR ;
                        SWAP ;
                        IF_LEFT
                          { SWAP ;
                            UNIT ;
                            SOME ;
                            DIG 2 ;
                            DUP ;
                            DUG 3 ;
                            CAR ;
                            DIG 3 ;
                            CDR ;
                            PAIR ;
                            UPDATE }
                          { DUP ; DUG 2 ; CAR ; DIG 2 ; CDR ; PAIR ; NONE unit ; SWAP ; UPDATE } } ;
                 SWAP ;
                 DROP ;
                 DIP { DUP ; CDR ; SWAP ; CAR ; CAR } ;
                 SWAP ;
                 PAIR ;
                 PAIR ;
                 NIL operation ;
                 PAIR } } } }

